From 50e8ea5d6b975c5fea8853022468ed4933a33484 Mon Sep 17 00:00:00 2001
From: Andrew Udvare <audvare@gmail.com>
Date: Thu, 13 Jan 2022 12:46:41 -0500
Subject: [PATCH 4/4] header: add HWMON_NAME

---
 scripts/pi-hole/php/header.php | 156 ++++++++++++++++++++++++++++++++-
 1 file changed, 154 insertions(+), 2 deletions(-)

diff --git a/scripts/pi-hole/php/header.php b/scripts/pi-hole/php/header.php
index ddfe5af7..2f9a5ef6 100644
--- a/scripts/pi-hole/php/header.php
+++ b/scripts/pi-hole/php/header.php
@@ -2,8 +2,160 @@
 $scriptname = basename($_SERVER['SCRIPT_FILENAME']);
 $hostname = gethostname() ? gethostname() : '';
 
-// Create cache busting version
-$cacheVer = filemtime(__FILE__);
+    // Create cache busting version
+    $cacheVer = filemtime(__FILE__);
+
+    // Generate CSRF token
+    if(empty($_SESSION['token'])) {
+        $_SESSION['token'] = base64_encode(openssl_random_pseudo_bytes(32));
+    }
+    $token = $_SESSION['token'];
+
+    // Try to get temperature value from different places (OS dependent)
+    if (isset($_ENV['HWMON_NAME']) || isset($_SERVER['HWMON_NAME'])) // Use name like k10temp, coretemp
+    {
+        $output = '';
+        $hwmon_name = isset($_ENV['HWMON_NAME']) ? $_ENV['HWMON_NAME'] : $_SERVER['HWMON_NAME'];
+        foreach (new DirectoryIterator('/sys/class/hwmon') as $fileinfo) {
+            if (substr_compare($fileinfo->getFilename(), 'hwmon', 0, 5, true) === 0 &&
+                substr_compare(
+                    file_get_contents(sprintf('%s/name', $fileinfo->getPathname())),
+                    $hwmon_name, 0, strlen($hwmon_name), true) === 0) {
+          $output = rtrim(file_get_contents(sprintf('%s/temp1_input', $fileinfo->getPathname())));
+          break;
+        }
+      }
+    }
+    elseif (file_exists("/sys/class/thermal/thermal_zone0/temp"))
+    {
+        $output = rtrim(file_get_contents("/sys/class/thermal/thermal_zone0/temp"));
+    }
+    elseif (file_exists("/sys/class/hwmon/hwmon0/temp1_input"))
+    {
+        $output = rtrim(file_get_contents("/sys/class/hwmon/hwmon0/temp1_input"));
+    }
+    else
+    {
+        $output = "";
+    }
+
+    // Test if we succeeded in getting the temperature
+    if(is_numeric($output))
+    {
+        // $output could be either 4-5 digits or 2-3, and we only divide by 1000 if it's 4-5
+        // ex. 39007 vs 39
+        $celsius = intval($output);
+
+        // If celsius is greater than 1 degree and is in the 4-5 digit format
+        if($celsius > 1000) {
+            // Use multiplication to get around the division-by-zero error
+            $celsius *= 1e-3;
+        }
+
+        // Get user-defined temperature limit if set
+        if(isset($setupVars['TEMPERATURE_LIMIT']))
+        {
+            $temperaturelimit = intval($setupVars['TEMPERATURE_LIMIT']);
+        }
+        else
+        {
+            $temperaturelimit = 60;
+        }
+    }
+    else
+    {
+        // Nothing can be colder than -273.15 degree Celsius (= 0 Kelvin)
+        // This is the minimum temperature possible (AKA absolute zero)
+        $celsius = -273.16;
+        // Set templimit to null if no tempsensor was found
+        $temperaturelimit = null;
+    }
+
+    // Get load
+    $loaddata = sys_getloadavg();
+    foreach ($loaddata as $key => $value) {
+        $loaddata[$key] = round($value, 2);
+    }
+    // Get number of processing units available to PHP
+    // (may be less than the number of online processors)
+    $nproc = shell_exec('nproc');
+    if(!is_numeric($nproc))
+    {
+        $cpuinfo = file_get_contents('/proc/cpuinfo');
+        preg_match_all('/^processor/m', $cpuinfo, $matches);
+        $nproc = count($matches[0]);
+    }
+
+    // Get memory usage
+    $data = explode("\n", file_get_contents("/proc/meminfo"));
+    $meminfo = array();
+    if(count($data) > 0)
+    {
+        foreach ($data as $line) {
+            $expl = explode(":", trim($line));
+            if(count($expl) == 2)
+            {
+                // remove " kB" from the end of the string and make it an integer
+                $meminfo[$expl[0]] = intval(substr($expl[1],0, -3));
+            }
+        }
+        $memory_used = $meminfo["MemTotal"]-$meminfo["MemFree"]-$meminfo["Buffers"]-$meminfo["Cached"];
+        $memory_total = $meminfo["MemTotal"];
+        $memory_usage = $memory_used/$memory_total;
+    }
+    else
+    {
+        $memory_usage = -1;
+    }
+
+    if($auth) {
+        // For session timer
+        $maxlifetime = ini_get("session.gc_maxlifetime");
+
+        // Generate CSRF token
+        if(empty($_SESSION['token'])) {
+            $_SESSION['token'] = base64_encode(openssl_random_pseudo_bytes(32));
+        }
+        $token = $_SESSION['token'];
+    }
+
+    if(isset($setupVars['WEBUIBOXEDLAYOUT']))
+    {
+        if($setupVars['WEBUIBOXEDLAYOUT'] === "boxed")
+        {
+            $boxedlayout = true;
+        }
+        else
+        {
+            $boxedlayout = false;
+        }
+    }
+    else
+    {
+        $boxedlayout = true;
+    }
+
+    // Override layout setting if layout is changed via Settings page
+    if(isset($_POST["field"]))
+    {
+        if($_POST["field"] === "webUI" && isset($_POST["boxedlayout"]))
+        {
+            $boxedlayout = true;
+        }
+        elseif($_POST["field"] === "webUI" && !isset($_POST["boxedlayout"]))
+        {
+            $boxedlayout = false;
+        }
+    }
+
+    function pidofFTL()
+    {
+        return shell_exec("pidof pihole-FTL");
+    }
+    $FTLpid = intval(pidofFTL());
+    $FTL = ($FTLpid !== 0 ? true : false);
+
+    $piholeFTLConf = piholeFTLConfig();
 ?>
 <!DOCTYPE html>
 <!--
-- 
2.38.0

