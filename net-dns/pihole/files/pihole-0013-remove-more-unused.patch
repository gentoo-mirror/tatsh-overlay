From ca9e9fcae3cd57b66f53ec8fd37e23dfbbf83594 Mon Sep 17 00:00:00 2001
From: Andrew Udvare <audvare@gmail.com>
Date: Mon, 25 Jul 2022 06:33:41 -0400
Subject: [PATCH 13/13] remove more unused

---
 advanced/Scripts/piholeCheckout.sh | 213 --------------------------
 advanced/Scripts/update.sh         | 233 -----------------------------
 advanced/Templates/pihole.sudo     |   9 --
 3 files changed, 455 deletions(-)
 delete mode 100755 advanced/Scripts/piholeCheckout.sh
 delete mode 100755 advanced/Scripts/update.sh
 delete mode 100644 advanced/Templates/pihole.sudo

diff --git a/advanced/Scripts/piholeCheckout.sh b/advanced/Scripts/piholeCheckout.sh
deleted file mode 100755
index 8c4c6db3..00000000
--- a/advanced/Scripts/piholeCheckout.sh
+++ /dev/null
@@ -1,213 +0,0 @@
-#!/usr/bin/env bash
-# Pi-hole: A black hole for Internet advertisements
-# (c) 2017 Pi-hole, LLC (https://pi-hole.net)
-# Network-wide ad blocking via your own hardware.
-#
-# Switch Pi-hole subsystems to a different GitHub branch.
-#
-# This file is copyright under the latest version of the EUPL.
-# Please see LICENSE file for your rights under this license.
-
-readonly PI_HOLE_FILES_DIR="/etc/.pihole"
-SKIP_INSTALL="true"
-source "${PI_HOLE_FILES_DIR}/automated install/basic-install.sh"
-
-# webInterfaceGitUrl set in basic-install.sh
-# webInterfaceDir set in basic-install.sh
-# piholeGitURL set in basic-install.sh
-# is_repo() sourced from basic-install.sh
-# setupVars set in basic-install.sh
-# check_download_exists sourced from basic-install.sh
-# fully_fetch_repo sourced from basic-install.sh
-# get_available_branches sourced from basic-install.sh
-# fetch_checkout_pull_branch sourced from basic-install.sh
-# checkout_pull_branch sourced from basic-install.sh
-
-source "${setupVars}"
-
-warning1() {
-    echo "  Please note that changing branches severely alters your Pi-hole subsystems"
-    echo "  Features that work on the master branch, may not on a development branch"
-    echo -e "  ${COL_LIGHT_RED}This feature is NOT supported unless a Pi-hole developer explicitly asks!${COL_NC}"
-    read -r -p "  Have you read and understood this? [y/N] " response
-    case "${response}" in
-        [yY][eE][sS]|[yY])
-            echo ""
-            return 0
-            ;;
-        *)
-            echo -e "\\n  ${INFO} Branch change has been canceled"
-            return 1
-            ;;
-    esac
-}
-
-updateCheckFunc() {
-    /opt/pihole/updatecheck.sh
-    /opt/pihole/updatecheck.sh x remote
-}
-
-checkout() {
-    local corebranches
-    local webbranches
-
-    # Check if FTL is installed - do this early on as FTL is a hard dependency for Pi-hole
-    local funcOutput
-    funcOutput=$(get_binary_name) #Store output of get_binary_name here
-    local binary
-    binary="pihole-FTL${funcOutput##*pihole-FTL}" #binary name will be the last line of the output of get_binary_name (it always begins with pihole-FTL)
-
-    # Avoid globbing
-    set -f
-
-    # This is unlikely
-    if ! is_repo "${PI_HOLE_FILES_DIR}" ; then
-        echo -e "  ${COL_LIGHT_RED}Error: Core Pi-hole repo is missing from system!"
-        echo -e "  Please re-run install script from https://github.com/pi-hole/pi-hole${COL_NC}"
-        exit 1;
-    fi
-    if [[ "${INSTALL_WEB_INTERFACE}" == "true" ]]; then
-        if ! is_repo "${webInterfaceDir}" ; then
-            echo -e "  ${COL_LIGHT_RED}Error: Web Admin repo is missing from system!"
-            echo -e "  Please re-run install script from https://github.com/pi-hole/pi-hole${COL_NC}"
-            exit 1;
-        fi
-    fi
-
-    if [[ -z "${1}" ]]; then
-        echo -e "  ${COL_LIGHT_RED}Invalid option${COL_NC}"
-        echo -e "  Try 'pihole checkout --help' for more information."
-        exit 1
-    fi
-
-    if ! warning1 ; then
-        exit 1
-    fi
-
-    if [[ "${1}" == "dev" ]] ; then
-        # Shortcut to check out development branches
-        echo -e "  ${INFO} Shortcut \"dev\" detected - checking out development / devel branches..."
-        echo ""
-        echo -e "  ${INFO} Pi-hole Core"
-        fetch_checkout_pull_branch "${PI_HOLE_FILES_DIR}" "development" || { echo "  ${CROSS} Unable to pull Core development branch"; exit 1; }
-        if [[ "${INSTALL_WEB_INTERFACE}" == "true" ]]; then
-            echo ""
-            echo -e "  ${INFO} Web interface"
-            fetch_checkout_pull_branch "${webInterfaceDir}" "devel" || { echo "  ${CROSS} Unable to pull Web development branch"; exit 1; }
-        fi
-        #echo -e "  ${TICK} Pi-hole Core"
-
-        local path
-        path="development/${binary}"
-        echo "development" > /etc/pihole/ftlbranch
-        chmod 644 /etc/pihole/ftlbranch
-    elif [[ "${1}" == "master" ]] ; then
-        # Shortcut to check out master branches
-        echo -e "  ${INFO} Shortcut \"master\" detected - checking out master branches..."
-        echo -e "  ${INFO} Pi-hole core"
-        fetch_checkout_pull_branch "${PI_HOLE_FILES_DIR}" "master" || { echo "  ${CROSS} Unable to pull Core master branch"; exit 1; }
-        if [[ ${INSTALL_WEB_INTERFACE} == "true" ]]; then
-            echo -e "  ${INFO} Web interface"
-            fetch_checkout_pull_branch "${webInterfaceDir}" "master" || { echo "  ${CROSS} Unable to pull Web master branch"; exit 1; }
-        fi
-        #echo -e "  ${TICK} Web Interface"
-        local path
-        path="master/${binary}"
-        echo "master" > /etc/pihole/ftlbranch
-        chmod 644 /etc/pihole/ftlbranch
-    elif [[ "${1}" == "core" ]] ; then
-        str="Fetching branches from ${piholeGitUrl}"
-        echo -ne "  ${INFO} $str"
-        if ! fully_fetch_repo "${PI_HOLE_FILES_DIR}" ; then
-            echo -e "${OVER}  ${CROSS} $str"
-            exit 1
-        fi
-        corebranches=($(get_available_branches "${PI_HOLE_FILES_DIR}"))
-
-        if [[ "${corebranches[*]}" == *"master"* ]]; then
-            echo -e "${OVER}  ${TICK} $str"
-            echo -e "  ${INFO} ${#corebranches[@]} branches available for Pi-hole Core"
-        else
-            # Print STDERR output from get_available_branches
-            echo -e "${OVER}  ${CROSS} $str\\n\\n${corebranches[*]}"
-            exit 1
-        fi
-
-        echo ""
-        # Have the user choose the branch they want
-        if ! (for e in "${corebranches[@]}"; do [[ "$e" == "${2}" ]] && exit 0; done); then
-            echo -e "  ${INFO} Requested branch \"${2}\" is not available"
-            echo -e "  ${INFO} Available branches for Core are:"
-            for e in "${corebranches[@]}"; do echo "      - $e"; done
-            exit 1
-        fi
-        checkout_pull_branch "${PI_HOLE_FILES_DIR}" "${2}"
-    elif [[ "${1}" == "web" ]] && [[ "${INSTALL_WEB_INTERFACE}" == "true" ]] ; then
-        str="Fetching branches from ${webInterfaceGitUrl}"
-        echo -ne "  ${INFO} $str"
-        if ! fully_fetch_repo "${webInterfaceDir}" ; then
-            echo -e "${OVER}  ${CROSS} $str"
-            exit 1
-        fi
-        webbranches=($(get_available_branches "${webInterfaceDir}"))
-
-        if [[ "${webbranches[*]}" == *"master"* ]]; then
-            echo -e "${OVER}  ${TICK} $str"
-            echo -e "  ${INFO} ${#webbranches[@]} branches available for Web Admin"
-        else
-            # Print STDERR output from get_available_branches
-            echo -e "${OVER}  ${CROSS} $str\\n\\n${webbranches[*]}"
-            exit 1
-        fi
-
-        echo ""
-        # Have the user choose the branch they want
-        if ! (for e in "${webbranches[@]}"; do [[ "$e" == "${2}" ]] && exit 0; done); then
-            echo -e "  ${INFO} Requested branch \"${2}\" is not available"
-            echo -e "  ${INFO} Available branches for Web Admin are:"
-            for e in "${webbranches[@]}"; do echo "      - $e"; done
-            exit 1
-        fi
-        checkout_pull_branch "${webInterfaceDir}" "${2}"
-        # Force an update of the updatechecker
-        updateCheckFunc
-    elif [[ "${1}" == "ftl" ]] ; then
-        local path
-        local oldbranch
-        path="${2}/${binary}"
-        oldbranch="$(pihole-FTL -b)"
-
-        if check_download_exists "$path"; then
-            echo "  ${TICK} Branch ${2} exists"
-            echo "${2}" > /etc/pihole/ftlbranch
-            chmod 644 /etc/pihole/ftlbranch
-            echo -e "  ${INFO} Switching to branch: \"${2}\" from \"${oldbranch}\""
-            FTLinstall "${binary}"
-            restart_service pihole-FTL
-            enable_service pihole-FTL
-            # Force an update of the updatechecker
-            updateCheckFunc
-        else
-            echo "  ${CROSS} Requested branch \"${2}\" is not available"
-            ftlbranches=( $(git ls-remote https://github.com/pi-hole/ftl | grep 'heads' | sed 's/refs\/heads\///;s/ //g' | awk '{print $2}') )
-            echo -e "  ${INFO} Available branches for FTL are:"
-            for e in "${ftlbranches[@]}"; do echo "      - $e"; done
-            exit 1
-        fi
-
-    else
-        echo -e "  ${INFO} Requested option \"${1}\" is not available"
-        exit 1
-    fi
-
-    # Force updating everything
-    if [[  ! "${1}" == "web" && ! "${1}" == "ftl" ]]; then
-        echo -e "  ${INFO} Running installer to upgrade your installation"
-        if "${PI_HOLE_FILES_DIR}/automated install/basic-install.sh" --unattended; then
-            exit 0
-        else
-            echo -e "  ${COL_LIGHT_RED} Error: Unable to complete update, please contact support${COL_NC}"
-            exit 1
-        fi
-    fi
-}
diff --git a/advanced/Scripts/update.sh b/advanced/Scripts/update.sh
deleted file mode 100755
index 609a054b..00000000
--- a/advanced/Scripts/update.sh
+++ /dev/null
@@ -1,233 +0,0 @@
-#!/usr/bin/env bash
-# Pi-hole: A black hole for Internet advertisements
-# (c) 2017 Pi-hole, LLC (https://pi-hole.net)
-# Network-wide ad blocking via your own hardware.
-#
-# Check Pi-hole core and admin pages versions and determine what
-# upgrade (if any) is required. Automatically updates and reinstalls
-# application if update is detected.
-#
-# This file is copyright under the latest version of the EUPL.
-# Please see LICENSE file for your rights under this license.
-
-# Variables
-readonly ADMIN_INTERFACE_GIT_URL="https://github.com/pi-hole/AdminLTE.git"
-readonly ADMIN_INTERFACE_DIR="/var/www/html/admin"
-readonly PI_HOLE_GIT_URL="https://github.com/pi-hole/pi-hole.git"
-readonly PI_HOLE_FILES_DIR="/etc/.pihole"
-
-# shellcheck disable=SC2034
-SKIP_INSTALL=true
-
-# when --check-only is passed to this script, it will not perform the actual update
-CHECK_ONLY=false
-
-# shellcheck disable=SC1090
-source "${PI_HOLE_FILES_DIR}/automated install/basic-install.sh"
-# shellcheck disable=SC1091
-source "/opt/pihole/COL_TABLE"
-
-# is_repo() sourced from basic-install.sh
-# make_repo() sourced from basic-install.sh
-# update_repo() source from basic-install.sh
-# getGitFiles() sourced from basic-install.sh
-# FTLcheckUpdate() sourced from basic-install.sh
-
-GitCheckUpdateAvail() {
-    local directory
-    local curBranch
-    directory="${1}"
-    curdir=$PWD
-    cd "${directory}" || return
-
-    # Fetch latest changes in this repo
-    git fetch --quiet origin
-
-    # Check current branch. If it is master, then check for the latest available tag instead of latest commit.
-    curBranch=$(git rev-parse --abbrev-ref HEAD)
-    if [[ "${curBranch}" == "master" ]]; then
-        # get the latest local tag
-        LOCAL=$(git describe --abbrev=0 --tags master)
-        # get the latest tag from remote
-        REMOTE=$(git describe --abbrev=0 --tags origin/master)
-
-    else
-        # @ alone is a shortcut for HEAD. Older versions of git
-        # need @{0}
-        LOCAL="$(git rev-parse "@{0}")"
-
-        # The suffix @{upstream} to a branchname
-        # (short form <branchname>@{u}) refers
-        # to the branch that the branch specified
-        # by branchname is set to build on top of#
-        # (configured with branch.<name>.remote and
-        # branch.<name>.merge). A missing branchname
-        # defaults to the current one.
-        REMOTE="$(git rev-parse "@{upstream}")"
-    fi
-
-
-    if [[ "${#LOCAL}" == 0 ]]; then
-        echo -e "\\n  ${COL_LIGHT_RED}Error: Local revision could not be obtained, please contact Pi-hole Support"
-        echo -e "  Additional debugging output:${COL_NC}"
-        git status
-        exit
-    fi
-    if [[ "${#REMOTE}" == 0 ]]; then
-        echo -e "\\n  ${COL_LIGHT_RED}Error: Remote revision could not be obtained, please contact Pi-hole Support"
-        echo -e "  Additional debugging output:${COL_NC}"
-        git status
-        exit
-    fi
-
-    # Change back to original directory
-    cd "${curdir}" || exit
-
-    if [[ "${LOCAL}" != "${REMOTE}" ]]; then
-        # Local branch is behind remote branch -> Update
-        return 0
-    else
-        # Local branch is up-to-date or in a situation
-        # where this updater cannot be used (like on a
-        # branch that exists only locally)
-        return 1
-    fi
-}
-
-main() {
-    local basicError="\\n  ${COL_LIGHT_RED}Unable to complete update, please contact Pi-hole Support${COL_NC}"
-    local core_update
-    local web_update
-    local FTL_update
-
-    core_update=false
-    web_update=false
-    FTL_update=false
-
-    # shellcheck disable=1090,2154
-    source "${setupVars}"
-
-    # Install packages used by this installation script (necessary if users have removed e.g. git from their systems)
-    package_manager_detect
-    install_dependent_packages "${INSTALLER_DEPS[@]}"
-
-    # This is unlikely
-    if ! is_repo "${PI_HOLE_FILES_DIR}" ; then
-        echo -e "\\n  ${COL_LIGHT_RED}Error: Core Pi-hole repo is missing from system!"
-        echo -e "  Please re-run install script from https://pi-hole.net${COL_NC}"
-        exit 1;
-    fi
-
-    echo -e "  ${INFO} Checking for updates..."
-
-    if GitCheckUpdateAvail "${PI_HOLE_FILES_DIR}" ; then
-        core_update=true
-        echo -e "  ${INFO} Pi-hole Core:\\t${COL_YELLOW}update available${COL_NC}"
-    else
-        core_update=false
-        echo -e "  ${INFO} Pi-hole Core:\\t${COL_LIGHT_GREEN}up to date${COL_NC}"
-    fi
-
-    if [[ "${INSTALL_WEB_INTERFACE}" == true ]]; then
-        if ! is_repo "${ADMIN_INTERFACE_DIR}" ; then
-            echo -e "\\n  ${COL_LIGHT_RED}Error: Web Admin repo is missing from system!"
-            echo -e "  Please re-run install script from https://pi-hole.net${COL_NC}"
-            exit 1;
-        fi
-
-        if GitCheckUpdateAvail "${ADMIN_INTERFACE_DIR}" ; then
-            web_update=true
-            echo -e "  ${INFO} Web Interface:\\t${COL_YELLOW}update available${COL_NC}"
-        else
-            web_update=false
-            echo -e "  ${INFO} Web Interface:\\t${COL_LIGHT_GREEN}up to date${COL_NC}"
-        fi
-    fi
-
-    local funcOutput
-    funcOutput=$(get_binary_name) #Store output of get_binary_name here
-    local binary
-    binary="pihole-FTL${funcOutput##*pihole-FTL}" #binary name will be the last line of the output of get_binary_name (it always begins with pihole-FTL)
-
-    if FTLcheckUpdate "${binary}" > /dev/null; then
-        FTL_update=true
-        echo -e "  ${INFO} FTL:\\t\\t${COL_YELLOW}update available${COL_NC}"
-    else
-        case $? in
-            1)
-                echo -e "  ${INFO} FTL:\\t\\t${COL_LIGHT_GREEN}up to date${COL_NC}"
-                ;;
-            2)
-                echo -e "  ${INFO} FTL:\\t\\t${COL_LIGHT_RED}Branch is not available.${COL_NC}\\n\\t\\t\\tUse ${COL_LIGHT_GREEN}pihole checkout ftl [branchname]${COL_NC} to switch to a valid branch."
-                ;;
-            *)
-                echo -e "  ${INFO} FTL:\\t\\t${COL_LIGHT_RED}Something has gone wrong, contact support${COL_NC}"
-        esac
-        FTL_update=false
-    fi
-
-    # Determine FTL branch
-    local ftlBranch
-    if [[ -f "/etc/pihole/ftlbranch" ]]; then
-        ftlBranch=$(</etc/pihole/ftlbranch)
-    else
-        ftlBranch="master"
-    fi
-
-    if [[ ! "${ftlBranch}" == "master" && ! "${ftlBranch}" == "development" ]]; then
-        # Notify user that they are on a custom branch which might mean they they are lost
-        # behind if a branch was merged to development and got abandoned
-        printf "  %b %bWarning:%b You are using FTL from a custom branch (%s) and might be missing future releases.\\n" "${INFO}" "${COL_LIGHT_RED}" "${COL_NC}" "${ftlBranch}"
-    fi
-
-    if [[ "${core_update}" == false && "${web_update}" == false && "${FTL_update}" == false ]]; then
-        echo ""
-        echo -e "  ${TICK} Everything is up to date!"
-        exit 0
-    fi
-
-    if [[ "${CHECK_ONLY}" == true ]]; then
-        echo ""
-        exit 0
-    fi
-
-    if [[ "${core_update}" == true ]]; then
-        echo ""
-        echo -e "  ${INFO} Pi-hole core files out of date, updating local repo."
-        getGitFiles "${PI_HOLE_FILES_DIR}" "${PI_HOLE_GIT_URL}"
-        echo -e "  ${INFO} If you had made any changes in '/etc/.pihole/', they have been stashed using 'git stash'"
-    fi
-
-    if [[ "${web_update}" == true ]]; then
-        echo ""
-        echo -e "  ${INFO} Pi-hole Web Admin files out of date, updating local repo."
-        getGitFiles "${ADMIN_INTERFACE_DIR}" "${ADMIN_INTERFACE_GIT_URL}"
-        echo -e "  ${INFO} If you had made any changes in '/var/www/html/admin/', they have been stashed using 'git stash'"
-    fi
-
-    if [[ "${FTL_update}" == true ]]; then
-        echo ""
-        echo -e "  ${INFO} FTL out of date, it will be updated by the installer."
-    fi
-
-    if [[ "${FTL_update}" == true || "${core_update}" == true ]]; then
-        ${PI_HOLE_FILES_DIR}/automated\ install/basic-install.sh --reconfigure --unattended || \
-            echo -e "${basicError}" && exit 1
-    fi
-
-    if [[ "${FTL_update}" == true || "${core_update}" == true || "${web_update}" == true ]]; then
-        # Force an update of the updatechecker
-        /opt/pihole/updatecheck.sh
-        /opt/pihole/updatecheck.sh x remote
-        echo -e "  ${INFO} Local version file information updated."
-    fi
-
-    echo ""
-    exit 0
-}
-
-if [[ "$1" == "--check-only" ]]; then
-    CHECK_ONLY=true
-fi
-
-main
diff --git a/advanced/Templates/pihole.sudo b/advanced/Templates/pihole.sudo
deleted file mode 100644
index 708309be..00000000
--- a/advanced/Templates/pihole.sudo
+++ /dev/null
@@ -1,9 +0,0 @@
-# Pi-hole: A black hole for Internet advertisements
-# (c) 2017 Pi-hole, LLC (https://pi-hole.net)
-# Network-wide ad blocking via your own hardware.
-#
-# Allows the WebUI to use Pi-hole commands
-#
-# This file is copyright under the latest version of the EUPL.
-# Please see LICENSE file for your rights under this license.
-#
-- 
2.38.0

