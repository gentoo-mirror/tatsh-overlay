diff --git a/advanced/Scripts/setupLCD.sh b/advanced/Scripts/setupLCD.sh
index 82523643..dcbbf8fe 100755
--- a/advanced/Scripts/setupLCD.sh
+++ b/advanced/Scripts/setupLCD.sh
@@ -17,7 +17,7 @@
 getInitSys() {
     if command -v systemctl > /dev/null && systemctl | grep -q '\-\.mount'; then
         SYSTEMD=1
-    elif [ -f /etc/init.d/cron ] && [ ! -h /etc/init.d/cron ]; then
+    elif [ -f @EPREFIX@/etc/init.d/cron ] && [ ! -h @EPREFIX@/etc/init.d/cron ]; then
         SYSTEMD=0
     else
         echo "Unrecognized init system"
@@ -28,13 +28,13 @@ getInitSys() {
 # Borrowed from adafruit-pitft-helper:
 # https://github.com/adafruit/Adafruit-PiTFT-Helper/blob/master/adafruit-pitft-helper#L274-L285
 autoLoginPiToConsole() {
-    if [ -e /etc/init.d/lightdm ]; then
+    if [ -e @EPREFIX@/etc/init.d/lightdm ]; then
         if [ ${SYSTEMD} -eq 1 ]; then
             systemctl set-default multi-user.target
-            ln -fs /etc/systemd/system/autologin@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
+            ln -fs @EPREFIX@/etc/systemd/system/autologin@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
         else
             update-rc.d lightdm disable 2
-            sed /etc/inittab -i -e "s/1:2345:respawn:\/sbin\/getty --noclear 38400 tty1/1:2345:respawn:\/bin\/login -f pi tty1 <\/dev\/tty1 >\/dev\/tty1 2>&1/"
+            sed @EPREFIX@/etc/inittab -i -e "s/1:2345:respawn:\/sbin\/getty --noclear 38400 tty1/1:2345:respawn:\/bin\/login -f pi tty1 <\/dev\/tty1 >\/dev\/tty1 2>&1/"
         fi
     fi
 }
@@ -45,7 +45,7 @@ getInitSys
 autoLoginPiToConsole

 # Set chronomter to run automatically when pi logs in
-echo /usr/local/bin/chronometer.sh >> /home/pi/.bashrc
+echo @EPREFIX@/usr/@LIBDIR@/pihole/chronometer.sh >> /home/pi/.bashrc
 # OR
 #$SUDO echo /usr/local/bin/chronometer.sh >> /etc/profile

@@ -57,12 +57,12 @@ apt-get -y install adafruit-pitft-helper
 adafruit-pitft-helper -t 28r

 # Download the cmdline.txt file that prevents the screen from going blank after a period of time
-mv /boot/cmdline.txt /boot/cmdline.orig
-curl -o /boot/cmdline.txt https://raw.githubusercontent.com/pi-hole/pi-hole/master/advanced/cmdline.txt
+mv @EPREFIX@/boot/cmdline.txt @EPREFIX@/boot/cmdline.orig
+curl -o @EPREFIX@/boot/cmdline.txt https://raw.githubusercontent.com/pi-hole/pi-hole/master/advanced/cmdline.txt

 # Back up the original file and download the new one
-mv /etc/default/console-setup /etc/default/console-setup.orig
-curl -o /etc/default/console-setup https://raw.githubusercontent.com/pi-hole/pi-hole/master/advanced/console-setup
+mv @EPREFIX@/etc/default/console-setup @EPREFIX@/etc/default/console-setup.orig
+curl -o @EPREFIX@/etc/default/console-setup https://raw.githubusercontent.com/pi-hole/pi-hole/master/advanced/console-setup

 # Instantly apply the font change to the LCD screen
 setupcon
diff --git a/advanced/Scripts/version.sh b/advanced/Scripts/version.sh
index 86ac45bc..b38190dd 100755
--- a/advanced/Scripts/version.sh
+++ b/advanced/Scripts/version.sh
@@ -10,8 +10,8 @@

 # Variables
 DEFAULT="-1"
-COREGITDIR="/etc/.pihole/"
-WEBGITDIR="/var/www/html/admin/"
+COREGITDIR="@EPREFIX@/usr/@LIBDIR@/pihole"
+WEBGITDIR="@EPREFIX@/var/www/localhost/htdocs/pihole-admin"

 getLocalVersion() {
     # FTL requires a different method
@@ -19,64 +19,17 @@ getLocalVersion() {
         pihole-FTL version
         return 0
     fi
-
-    # Get the tagged version of the local repository
-    local directory="${1}"
-    local version
-
-    cd "${directory}" 2> /dev/null || { echo "${DEFAULT}"; return 1; }
-    version=$(git describe --tags --always || echo "$DEFAULT")
-    if [[ "${version}" =~ ^v ]]; then
-        echo "${version}"
-    elif [[ "${version}" == "${DEFAULT}" ]]; then
-        echo "ERROR"
-        return 1
-    else
-        echo "Untagged"
-    fi
+    echo "@PIHOLE_VERSION@"
     return 0
 }

 getLocalHash() {
-    # Local FTL hash does not exist on filesystem
-    if [[ "$1" == "FTL" ]]; then
-        echo "N/A"
-        return 0
-    fi
-
-    # Get the short hash of the local repository
-    local directory="${1}"
-    local hash
-
-    cd "${directory}" 2> /dev/null || { echo "${DEFAULT}"; return 1; }
-    hash=$(git rev-parse --short HEAD || echo "$DEFAULT")
-    if [[ "${hash}" == "${DEFAULT}" ]]; then
-        echo "ERROR"
-        return 1
-    else
-        echo "${hash}"
-    fi
+    echo "N/A"
     return 0
 }

 getRemoteHash(){
-    # Remote FTL hash is not applicable
-    if [[ "$1" == "FTL" ]]; then
-        echo "N/A"
-        return 0
-    fi
-
-    local daemon="${1}"
-    local branch="${2}"
-
-    hash=$(git ls-remote --heads "https://github.com/pi-hole/${daemon}" | \
-        awk -v bra="$branch" '$0~bra {print substr($0,0,8);exit}')
-    if [[ -n "$hash" ]]; then
-        echo "$hash"
-    else
-        echo "ERROR"
-        return 1
-    fi
+    echo "N/A"
     return 0
 }

@@ -86,7 +39,7 @@ getRemoteVersion(){
     local version
     local cachedVersions
     local arrCache
-    cachedVersions="/etc/pihole/GitHubVersions"
+    cachedVersions="@EPREFIX@/var/lib/pihole/GitHubVersions"

     #If the above file exists, then we can read from that. Prevents overuse of GitHub API
     if [[ -f "$cachedVersions" ]]; then
@@ -119,10 +72,9 @@ getLocalBranch(){

      # Local FTL btranch is stored in /etc/pihole/ftlbranch
     if [[ "$1" == "FTL" ]]; then
-        branch="$(pihole-FTL branch)"
+        branch="v@PIHOLE_FTL_VERSION@"
     else
-        cd "${directory}" 2> /dev/null || { echo "${DEFAULT}"; return 1; }
-        branch=$(git rev-parse --abbrev-ref HEAD || echo "$DEFAULT")
+        branch="v@PIHOLE_VERSION@"
     fi
     if [[ ! "${branch}" =~ ^v ]]; then
         if [[ "${branch}" == "master" ]]; then
@@ -179,7 +131,7 @@ errorOutput() {
 defaultOutput() {
     # Source the setupvars config file
     # shellcheck disable=SC1091
-    source /etc/pihole/setupVars.conf
+    source @EPREFIX@/var/lib/pihole/setupVars.conf

     versionOutput "pi-hole" "$@"

