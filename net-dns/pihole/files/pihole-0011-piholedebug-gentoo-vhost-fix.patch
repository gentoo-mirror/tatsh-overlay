From 26c5087e831672a84145cca6852a1f7d2ff185e2 Mon Sep 17 00:00:00 2001
From: Andrew Udvare <audvare@gmail.com>
Date: Fri, 14 Jan 2022 18:21:09 -0500
Subject: [PATCH 11/13] piholeDebug Gentoo/vhost fixes

---
 advanced/Scripts/piholeDebug.sh | 58 +++++++++++++++++++--------------
 advanced/Scripts/updatecheck.sh |  2 +-
 2 files changed, 34 insertions(+), 26 deletions(-)

diff --git a/advanced/Scripts/piholeDebug.sh b/advanced/Scripts/piholeDebug.sh
index c70639ac..c760d0f0 100755
--- a/advanced/Scripts/piholeDebug.sh
+++ b/advanced/Scripts/piholeDebug.sh
@@ -22,9 +22,13 @@ set -o pipefail
 ######## GLOBAL VARS ########
 # These variables would normally be next to the other files
 # but we need them to be first in order to get the colors needed for the script output
-PIHOLE_SCRIPTS_DIRECTORY="@EPREFIX@/usr/@LIBDIR@/pihole"
 PIHOLE_COLTABLE_FILE="@EPREFIX@/usr/@LIBDIR@/pihole/COL_TABLE"
 
+VHOST_SERVER=lighttpd
+if [ -f /etc/vhosts/webapp-config ]; then
+    VHOST_SERVER=$(grep -F vhost_server= /etc/vhosts/webapp-config | head -n1 | cut '-d"' -f2)
+fi
+
 # These provide the colors we need for making the log more readable
 if [[ -f ${PIHOLE_COLTABLE_FILE} ]]; then
     source ${PIHOLE_COLTABLE_FILE}
@@ -47,7 +51,6 @@ fi
 OBFUSCATED_PLACEHOLDER="<DOMAIN OBFUSCATED>"
 
 # FAQ URLs for use in showing the debug log
-FAQ_UPDATE_PI_HOLE="${COL_CYAN}https://discourse.pi-hole.net/t/how-do-i-update-pi-hole/249${COL_NC}"
 FAQ_CHECKOUT_COMMAND="${COL_CYAN}https://discourse.pi-hole.net/t/the-pihole-command-with-examples/738#checkout${COL_NC}"
 FAQ_HARDWARE_REQUIREMENTS="${COL_CYAN}https://docs.pi-hole.net/main/prerequisites/${COL_NC}"
 FAQ_HARDWARE_REQUIREMENTS_PORTS="${COL_CYAN}https://docs.pi-hole.net/main/prerequisites/#ports${COL_NC}"
@@ -61,18 +64,14 @@ FORUMS_URL="${COL_CYAN}https://discourse.pi-hole.net${COL_NC}"
 
 # Directories required by Pi-hole
 # https://discourse.pi-hole.net/t/what-files-does-pi-hole-use/1684
-CORE_GIT_DIRECTORY="@EPREFIX@/usr/@LIBDIR@/pihole"
 CRON_D_DIRECTORY="@EPREFIX@/etc/cron.d"
 DNSMASQ_D_DIRECTORY="@EPREFIX@/etc/pihole/dnsmasq.d"
 PIHOLE_DIRECTORY="@EPREFIX@/var/lib/pihole"
-PIHOLE_SCRIPTS_DIRECTORY="@EPREFIX@/usr/@LIBDIR@/pihole"
 BIN_DIRECTORY="@EPREFIX@/usr/bin"
 RUN_DIRECTORY="@EPREFIX@/run"
 LOG_DIRECTORY="@EPREFIX@/var/log"
-WEB_SERVER_LOG_DIRECTORY="${LOG_DIRECTORY}/lighttpd"
+WEB_SERVER_LOG_DIRECTORY="${LOG_DIRECTORY}/${VHOST_SERVER}"
 WEB_SERVER_CONFIG_DIRECTORY="@EPREFIX@/etc/lighttpd"
-HTML_DIRECTORY="@EPREFIX@/var/www/localhost/htdocs"
-WEB_GIT_DIRECTORY="${HTML_DIRECTORY}/pihole-admin"
 #BLOCK_PAGE_DIRECTORY="${HTML_DIRECTORY}/pihole"
 SHM_DIRECTORY="/dev/shm"
 ETC="/etc"
@@ -139,7 +138,7 @@ RESOLVCONF="${ETC}/resolv.conf"
 DNSMASQ_CONF="${ETC}/dnsmasq.conf"
 
 # Store Pi-hole's processes in an array for easy use and parsing
-PIHOLE_PROCESSES=( "lighttpd" "pihole-FTL" )
+PIHOLE_PROCESSES=( "pihole-FTL" "$VHOST_SERVER" )
 
 # Store the required directories in an array so it can be parsed through
 REQUIRED_FILES=("${PIHOLE_CRON_FILE}"
@@ -164,7 +163,9 @@ REQUIRED_FILES=("${PIHOLE_CRON_FILE}"
 "${DNSMASQ_CONF}"
 "${PIHOLE_CUSTOM_HOSTS_FILE}")
 
-DISCLAIMER="This process collects information from your Pi-hole, and optionally uploads it to a unique and random directory on tricorder.pi-hole.net.
+DISCLAIMER="tatsh-overlay message: The following output may differ significantly from a standard Pi-hole installation's. Any issues should be posted WITHOUT this log to https://github.com/Tatsh/tatsh-overlay/issues before sending an issue upstream. You will then be advised if upstream is relevant for the issue. If a log is necessary, it will be requested.
+
+This process collects information from your Pi-hole, and optionally uploads it to a unique and random directory on tricorder.pi-hole.net.
 
 The intent of this script is to allow users to self-diagnose their installations.  This is accomplished by running tests against our software and providing the user with links to FAQ articles when a problem is detected.  Since we are a small team and Pi-hole has been growing steadily, it is our hope that this will help us spend more time on development.
 
@@ -280,7 +281,7 @@ compare_local_version_to_git_version() {
             else
                 # echo the current version in yellow, signifying it's something to take a look at, but not a critical error
                 # Also add a URL to an FAQ
-                log_write "${INFO} ${pihole_component}: ${COL_YELLOW}${remote_version:-Untagged}${COL_NC} (${FAQ_UPDATE_PI_HOLE})"
+                log_write "${INFO} ${pihole_component}: ${COL_YELLOW}${remote_version:-Untagged}${COL_NC}"
             fi
 
             # Print the repo upstreams
@@ -345,7 +346,7 @@ check_ftl_version() {
         log_write "${TICK} ${ftl_name}: ${COL_GREEN}${FTL_VERSION}${COL_NC}"
     else
         # If not, show it in yellow, signifying there is an update
-        log_write "${INFO} ${ftl_name}: ${COL_YELLOW}${FTL_VERSION}${COL_NC} (${FAQ_UPDATE_PI_HOLE})"
+        log_write "${TICK} ${ftl_name}: ${COL_YELLOW}${FTL_VERSION}${COL_NC}"
     fi
 
     # If they use the master branch, they are on the stable codebase
@@ -364,10 +365,6 @@ check_ftl_version() {
 
 # Checks the core version of the Pi-hole codebase
 check_component_versions() {
-    # Check the Web version, branch, and commit
-    compare_local_version_to_git_version "${CORE_GIT_DIRECTORY}" "Core"
-    # Check the Web version, branch, and commit
-    compare_local_version_to_git_version "${WEB_GIT_DIRECTORY}" "Web"
     # Check the FTL version
     check_ftl_version
 }
@@ -384,8 +381,12 @@ get_program_version() {
                     ;;
         "php") program_version="$(${program_name} -v 2> /dev/null | head -n1 | cut -d '-' -f1 | cut -d ' ' -f2)"
                 ;;
+        "nginx") program_version="$(${program_name} -v 2>&1 | head -n1 | cut -d/ -f2)"
+                ;;
+        apache*) program_version="$(apache2 -v 2> /dev/null | grep -F version: | cut -d/ -f2 | cut '-d ' -f1)"
+                ;;
         # If a match is not found, show an error
-        *) echo "Unrecognized program";
+        *) echo "Unrecognized program '${program_name}'";
     esac
     # If the program does not have a version (the variable is empty)
     if [[ -z "${program_version}" ]]; then
@@ -401,7 +402,7 @@ get_program_version() {
 # and their versions, using the functions above.
 check_critical_program_versions() {
     # Use the function created earlier and bundle them into one function that checks all the version numbers
-    get_program_version "lighttpd"
+    get_program_version "$VHOST_SERVER"
     get_program_version "php"
 }
 
@@ -420,6 +421,7 @@ os_check() {
 
     # Extract dig response
     response="${cmdResult%%$'\n'*}"
+    response="${response} Gentoo=1"
 
     IFS=" " read -r -a supportedOS < <(echo "${response}" | tr -d '"')
     for distro_and_versions in "${supportedOS[@]}"
@@ -432,7 +434,7 @@ os_check() {
             IFS="," read -r -a supportedVer <<<"${versions_part}"
             for version in "${supportedVer[@]}"
             do
-                if [[ "${detected_version}" =~ $version ]]; then
+                if [[ "${detected_version:-1}" =~ $version ]]; then
                     valid_version=true
                     break
                 fi
@@ -448,9 +450,9 @@ os_check() {
         log_write "${TICK} Distro:  ${COL_GREEN}${detected_os^}${COL_NC}"
 
         if [ "$valid_version" = true ]; then
-            log_write "${TICK} Version: ${COL_GREEN}${detected_version}${COL_NC}"
+            log_write "${TICK} Version: ${COL_GREEN}${detected_version:-1}${COL_NC}"
         else
-            log_write "${CROSS} Version: ${COL_RED}${detected_version}${COL_NC}"
+            log_write "${CROSS} Version: ${COL_RED}${detected_version:-1}${COL_NC}"
             log_write "${CROSS} Error: ${COL_RED}${detected_os^} is supported but version ${detected_version} is currently unsupported (${FAQ_HARDWARE_REQUIREMENTS})${COL_NC}"
         fi
     else
@@ -749,7 +751,7 @@ check_required_ports() {
     # Since Pi-hole needs 53, 80, and 4711, check what they are being used by
     # so we can detect any issues
     local resolver="pihole-FTL"
-    local web_server="lighttpd"
+    local web_server="${VHOST_SERVER}"
     local ftl="pihole-FTL"
     # Create an array for these ports in use
     ports_in_use=()
@@ -811,6 +813,12 @@ check_networking() {
 }
 
 check_x_headers() {
+    if emerge --search www-apps/pihole-admin-lte | grep -F installed | grep -Fq 'Not Installed'; then
+        return
+    fi
+    if [ -f "@EPREFIX@/etc/pihole/debug-vars" ]; then
+        source "@EPREFIX@/etc/pihole/debug-vars"
+    fi
     # The X-Headers allow us to determine from the command line if the Web
     # lighttpd.conf has a directive to show "X-Pi-hole: A black hole for Internet advertisements."
     # in the header of any Pi-holed domain
@@ -821,7 +829,7 @@ check_x_headers() {
     # Use curl -I to get the header and parse out just the X-Pi-hole one
     local full_curl_output_dashboard
     local dashboard
-    full_curl_output_dashboard="$(curl -Is localhost/admin/)"
+    full_curl_output_dashboard="$(curl -Is "${DASHBOARD_HOST}/admin/")"
     dashboard=$(echo "${full_curl_output_dashboard}" | awk '/X-Pi-hole/' | tr -d '\r')
     # Store what the X-Header should be in variables for comparison later
     local dashboard_working
@@ -1145,9 +1153,9 @@ show_content_of_pihole_files() {
     # Show the content of the files in each of Pi-hole's folders
     show_content_of_files_in_dir "${PIHOLE_DIRECTORY}"
     show_content_of_files_in_dir "${DNSMASQ_D_DIRECTORY}"
-    show_content_of_files_in_dir "${WEB_SERVER_CONFIG_DIRECTORY}"
-    show_content_of_files_in_dir "${CRON_D_DIRECTORY}"
-    show_content_of_files_in_dir "${WEB_SERVER_LOG_DIRECTORY}"
+    [ -d "${WEB_SERVER_CONFIG_DIRECTORY}" ] && show_content_of_files_in_dir "${WEB_SERVER_CONFIG_DIRECTORY}"
+    [ -d "${CRON_D_DIRECTORY}" ] && show_content_of_files_in_dir "${CRON_D_DIRECTORY}"
+    [ -d "${WEB_SERVER_LOG_DIRECTORY}" ] && show_content_of_files_in_dir "${WEB_SERVER_LOG_DIRECTORY}"
     show_content_of_files_in_dir "${LOG_DIRECTORY}"
     show_content_of_files_in_dir "${SHM_DIRECTORY}"
     show_content_of_files_in_dir "${ETC}"
diff --git a/advanced/Scripts/updatecheck.sh b/advanced/Scripts/updatecheck.sh
index 49227a56..a9d7523e 100755
--- a/advanced/Scripts/updatecheck.sh
+++ b/advanced/Scripts/updatecheck.sh
@@ -22,7 +22,7 @@ function get_local_version() {
 
 # Source the setupvars config file
 # shellcheck disable=SC1091
-. @EPREFIX@/var/lib/setupVars.conf
+. /etc/pihole/setupVars.conf
 
 # Source the utils file
 # shellcheck disable=SC1091
-- 
2.38.0

