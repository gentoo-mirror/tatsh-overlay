From ecf63926a5ab8e6df5f4c24623c363cbf38d7164 Mon Sep 17 00:00:00 2001
From: Andrew Udvare <audvare@gmail.com>
Date: Sun, 30 Oct 2022 22:55:31 -0400
Subject: [PATCH 1/2] System libraries

---
 CMakeLists.txt                 | 16 ++++++++++++
 externals/CMakeLists.txt       | 46 +++++++++++++++++++---------------
 src/audio_core/CMakeLists.txt  | 10 +++++---
 src/citra/CMakeLists.txt       |  7 +++++-
 src/common/CMakeLists.txt      | 13 +++++-----
 src/common/logging/backend.cpp |  3 +--
 6 files changed, 63 insertions(+), 32 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1344d06e5..93e29c422 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -87,6 +87,22 @@ CMAKE_DEPENDENT_OPTION(CITRA_ENABLE_BUNDLE_TARGET "Enable the distribution bundl
 CMAKE_DEPENDENT_OPTION(COMPILE_WITH_DWARF "Add DWARF debugging information" ${IS_DEBUG_BUILD} "MINGW" OFF)
 option(ENABLE_LTO "Enable link time optimization" ${DEFAULT_ENABLE_LTO})
 option(CITRA_USE_PRECOMPILED_HEADERS "Use precompiled headers" ON)
+
+option(USE_SYSTEM_BOOST "Use the system Boost libs (instead of the bundled ones)" OFF)
+option(USE_SYSTEM_CUBEB "Use system cubeb libs" OFF)
+option(USE_SYSTEM_ENET "Use system enet libs" OFF)
+option(USE_SYSTEM_FMT "Use system fmt libs" OFF)
+option(USE_SYSTEM_INIH "Use system inih" OFF)
+option(USE_SYSTEM_TEAKRA "Use system Teakra libs" OFF)
+option(USE_SYSTEM_XBYAK "Use system xbyak" OFF)
+option(USE_SYSTEM_ZSTD "Use system zstd libs" OFF)
+option(DISABLE_SUBMODULE_CHECK "Disable check for submodules" OFF)
+
+
+CMAKE_DEPENDENT_OPTION(CITRA_USE_BUNDLED_MOLTENVK "Download the bundled MoltenVK" ON "APPLE" OFF)
+
+CMAKE_DEPENDENT_OPTION(CITRA_BUNDLE_LIBRARIES "Bundle dependent libraries with the output executables" ON "APPLE" OFF)
+
 option(CITRA_WARNINGS_AS_ERRORS "Enable warnings as errors" ON)
 
 include(CitraHandleSystemLibs)
diff --git a/externals/CMakeLists.txt b/externals/CMakeLists.txt
index 46e8ca13d..522ca0920 100644
--- a/externals/CMakeLists.txt
+++ b/externals/CMakeLists.txt
@@ -43,13 +43,11 @@ endif()
 # Catch2
 set(CATCH_INSTALL_DOCS OFF CACHE BOOL "")
 set(CATCH_INSTALL_EXTRAS OFF CACHE BOOL "")
-add_subdirectory(catch2)
+find_package(Catch2 REQUIRED)
 
 # Crypto++
 if(USE_SYSTEM_CRYPTOPP)
     find_package(cryptopp REQUIRED)
-    add_library(cryptopp INTERFACE)
-    target_link_libraries(cryptopp INTERFACE cryptopp::cryptopp)
 else()
     set(CRYPTOPP_BUILD_DOCUMENTATION OFF CACHE BOOL "")
     set(CRYPTOPP_BUILD_TESTING OFF CACHE BOOL "")
@@ -162,7 +160,12 @@ endif()
 add_subdirectory(open_source_archives)
 
 # faad2
-add_subdirectory(faad2 EXCLUDE_FROM_ALL)
+if(USE_SYSTEM_FAAD2)
+    include(FindPkgConfig)
+    pkg_check_modules(PC_FAAD2 faad2 REQUIRED IMPORTED_TARGET GLOBAL)
+else()
+    add_subdirectory(faad2 EXCLUDE_FROM_ALL)
+endif()
 
 # Dynamic library headers
 add_library(library-headers INTERFACE)
@@ -195,7 +198,11 @@ endif()
 add_subdirectory(sirit EXCLUDE_FROM_ALL)
 
 # Teakra
-add_subdirectory(teakra EXCLUDE_FROM_ALL)
+if (NOT USE_SYSTEM_TEAKRA)
+    add_subdirectory(teakra EXCLUDE_FROM_ALL)
+else()
+    find_library(TEAKRA_LIBS teakra REQUIRED)
+endif()
 
 # SDL2
 if (ENABLE_SDL2 AND NOT USE_SYSTEM_SDL2)
@@ -211,12 +218,7 @@ endif()
 
 # Zstandard
 if(USE_SYSTEM_ZSTD)
-    find_package(zstd REQUIRED)
-    add_library(zstd INTERFACE)
-    if(TARGET zstd::libzstd_shared)
-        message(STATUS "Found system Zstandard")
-    endif()
-    target_link_libraries(zstd INTERFACE zstd::libzstd_shared)
+    find_library(ZSTD_LIBS zstd REQUIRED)
 else()
     set(ZSTD_LEGACY_SUPPORT OFF)
     set(ZSTD_BUILD_PROGRAMS OFF)
@@ -338,15 +340,19 @@ endif()
 
 # OpenAL Soft
 if (ENABLE_OPENAL)
-    set(ALSOFT_EMBED_HRTF_DATA OFF CACHE BOOL "")
-    set(ALSOFT_EXAMPLES OFF CACHE BOOL "")
-    set(ALSOFT_INSTALL OFF CACHE BOOL "")
-    set(ALSOFT_INSTALL_CONFIG OFF CACHE BOOL "")
-    set(ALSOFT_INSTALL_HRTF_DATA OFF CACHE BOOL "")
-    set(ALSOFT_INSTALL_AMBDEC_PRESETS OFF CACHE BOOL "")
-    set(ALSOFT_UTILS OFF CACHE BOOL "")
-    set(LIBTYPE "STATIC" CACHE STRING "")
-    add_subdirectory(openal-soft EXCLUDE_FROM_ALL)
+    if (USE_SYSTEM_OPENAL)
+        find_package(OpenAL REQUIRED)
+    else()
+        set(ALSOFT_EMBED_HRTF_DATA OFF CACHE BOOL "")
+        set(ALSOFT_EXAMPLES OFF CACHE BOOL "")
+        set(ALSOFT_INSTALL OFF CACHE BOOL "")
+        set(ALSOFT_INSTALL_CONFIG OFF CACHE BOOL "")
+        set(ALSOFT_INSTALL_HRTF_DATA OFF CACHE BOOL "")
+        set(ALSOFT_INSTALL_AMBDEC_PRESETS OFF CACHE BOOL "")
+        set(ALSOFT_UTILS OFF CACHE BOOL "")
+        set(LIBTYPE "STATIC" CACHE STRING "")
+        add_subdirectory(openal-soft EXCLUDE_FROM_ALL)
+    endif()
 endif()
 
 # VMA
diff --git a/src/audio_core/CMakeLists.txt b/src/audio_core/CMakeLists.txt
index 2146df6fb..48a0c609e 100644
--- a/src/audio_core/CMakeLists.txt
+++ b/src/audio_core/CMakeLists.txt
@@ -44,7 +44,7 @@ add_library(audio_core STATIC
 create_target_directory_groups(audio_core)
 
 target_link_libraries(audio_core PUBLIC citra_common citra_core)
-target_link_libraries(audio_core PRIVATE faad2 SoundTouch teakra)
+target_link_libraries(audio_core PRIVATE faad SoundTouch teakra)
 
 if(ENABLE_SDL2)
     target_link_libraries(audio_core PRIVATE SDL2::SDL2)
@@ -57,9 +57,13 @@ if(ENABLE_CUBEB)
 endif()
 
 if(ENABLE_OPENAL)
-    target_link_libraries(audio_core PRIVATE OpenAL)
     target_compile_definitions(audio_core PUBLIC HAVE_OPENAL)
-    add_definitions(-DAL_LIBTYPE_STATIC)
+    if (USE_SYSTEM_OPENAL)
+        target_link_libraries(audio_core PRIVATE ${OPENAL_LIBRARY})
+    else()
+        target_link_libraries(audio_core PRIVATE OpenAL)
+        add_definitions(-DAL_LIBTYPE_STATIC)
+    endif()
 endif()
 
 if (CITRA_USE_PRECOMPILED_HEADERS)
diff --git a/src/citra/CMakeLists.txt b/src/citra/CMakeLists.txt
index 80cfc46e4..498b77027 100644
--- a/src/citra/CMakeLists.txt
+++ b/src/citra/CMakeLists.txt
@@ -21,7 +21,12 @@ add_executable(citra
 create_target_directory_groups(citra)
 
 target_link_libraries(citra PRIVATE citra_common citra_core input_common network)
-target_link_libraries(citra PRIVATE inih glad)
+target_link_libraries(citra PRIVATE glad)
+if (NOT USE_SYSTEM_INIH)
+    target_link_libraries(citra PRIVATE inih)
+else()
+    target_link_libraries(citra PRIVATE ${INIH_LIBS})
+endif()
 if (MSVC)
     target_link_libraries(citra PRIVATE getopt)
 endif()
diff --git a/src/common/CMakeLists.txt b/src/common/CMakeLists.txt
index 3b9c51984..43c4a2acb 100644
--- a/src/common/CMakeLists.txt
+++ b/src/common/CMakeLists.txt
@@ -171,11 +171,14 @@ else()
     $<$<CXX_COMPILER_ID:Clang>:-fsized-deallocation>
   )
 endif()
-
 create_target_directory_groups(citra_common)
 
 target_link_libraries(citra_common PUBLIC fmt library-headers microprofile Boost::boost Boost::serialization Boost::iostreams)
-target_link_libraries(citra_common PRIVATE zstd)
+if (NOT USE_SYSTEM_ZSTD)
+    target_link_libraries(citra_common PRIVATE libzstd_static)
+else()
+    target_link_libraries(citra_common PUBLIC zstd)
+endif()
 
 if ("x86_64" IN_LIST ARCHITECTURE)
     target_link_libraries(citra_common PRIVATE xbyak)
@@ -189,8 +192,6 @@ if (CITRA_USE_PRECOMPILED_HEADERS)
     target_precompile_headers(citra_common PRIVATE precompiled_headers.h)
 endif()
 
-find_library(BACKTRACE_LIBRARY backtrace)
-if (BACKTRACE_LIBRARY AND ${CMAKE_SYSTEM_NAME} STREQUAL "Linux" AND CMAKE_CXX_COMPILER_ID STREQUAL GNU)
-    target_link_libraries(citra_common PRIVATE ${BACKTRACE_LIBRARY} dl)
-    target_compile_definitions(citra_common PRIVATE CITRA_LINUX_GCC_BACKTRACE)
+if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux" AND CMAKE_CXX_COMPILER_ID STREQUAL GNU)
+  target_link_libraries(citra_common PRIVATE dl)
 endif()
diff --git a/src/common/logging/backend.cpp b/src/common/logging/backend.cpp
index f39c79dea..d0758388f 100644
--- a/src/common/logging/backend.cpp
+++ b/src/common/logging/backend.cpp
@@ -13,8 +13,7 @@
 #define _SH_DENYWR 0
 #endif
 
-#ifdef CITRA_LINUX_GCC_BACKTRACE
-#define BOOST_STACKTRACE_USE_BACKTRACE
+#if defined(__linux__) && defined(__GNUG__) && !defined(__clang__)
 #include <boost/stacktrace.hpp>
 #undef BOOST_STACKTRACE_USE_BACKTRACE
 #include <signal.h>
-- 
2.42.0

