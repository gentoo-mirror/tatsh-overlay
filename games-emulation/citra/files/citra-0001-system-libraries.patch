From 3d37c0307c205aec2101652635169b3e9c6864c2 Mon Sep 17 00:00:00 2001
From: Andrew Udvare <audvare@gmail.com>
Date: Sun, 30 Oct 2022 22:55:31 -0400
Subject: [PATCH 1/2] System libraries

---
 CMakeLists.txt                 |  16 +++++
 externals/CMakeLists.txt       | 109 ++++++++++++++++++++++-----------
 externals/boost                |   2 +-
 externals/discord-rpc          |   2 +-
 externals/libressl             |   2 +-
 src/audio_core/CMakeLists.txt  |   8 ++-
 src/citra/CMakeLists.txt       |   7 ++-
 src/common/CMakeLists.txt      |  15 ++---
 src/common/logging/backend.cpp |   3 +-
 src/core/CMakeLists.txt        |   2 +-
 10 files changed, 115 insertions(+), 51 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index a52c4f66a..33f3edfb7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -73,6 +73,22 @@ CMAKE_DEPENDENT_OPTION(ENABLE_AUDIOTOOLBOX "Use AudioToolbox decoder (preferred
 CMAKE_DEPENDENT_OPTION(COMPILE_WITH_DWARF "Add DWARF debugging information" ${IS_DEBUG_BUILD} "MINGW" OFF)
 option(ENABLE_LTO "Enable link time optimization" OFF)
 option(CITRA_USE_PRECOMPILED_HEADERS "Use precompiled headers" ON)
+
+option(USE_SYSTEM_BOOST "Use the system Boost libs (instead of the bundled ones)" OFF)
+option(USE_SYSTEM_CUBEB "Use system cubeb libs" OFF)
+option(USE_SYSTEM_ENET "Use system enet libs" OFF)
+option(USE_SYSTEM_FMT "Use system fmt libs" OFF)
+option(USE_SYSTEM_INIH "Use system inih" OFF)
+option(USE_SYSTEM_TEAKRA "Use system Teakra libs" OFF)
+option(USE_SYSTEM_XBYAK "Use system xbyak" OFF)
+option(USE_SYSTEM_ZSTD "Use system zstd libs" OFF)
+option(DISABLE_SUBMODULE_CHECK "Disable check for submodules" OFF)
+
+
+CMAKE_DEPENDENT_OPTION(CITRA_USE_BUNDLED_MOLTENVK "Download the bundled MoltenVK" ON "APPLE" OFF)
+
+CMAKE_DEPENDENT_OPTION(CITRA_BUNDLE_LIBRARIES "Bundle dependent libraries with the output executables" ON "APPLE" OFF)
+
 option(CITRA_WARNINGS_AS_ERRORS "Enable warnings as errors" ON)

 # System library options
diff --git a/externals/CMakeLists.txt b/externals/CMakeLists.txt
index 38038af1d..2c1bdfff7 100644
--- a/externals/CMakeLists.txt
+++ b/externals/CMakeLists.txt
@@ -39,15 +39,18 @@ endif()
 # Catch2
 set(CATCH_INSTALL_DOCS OFF CACHE BOOL "")
 set(CATCH_INSTALL_EXTRAS OFF CACHE BOOL "")
-add_subdirectory(catch2)
+find_package(Catch2 REQUIRED)

 # Crypto++
-set(CRYPTOPP_BUILD_DOCUMENTATION OFF CACHE BOOL "")
-set(CRYPTOPP_BUILD_TESTING OFF CACHE BOOL "")
-set(CRYPTOPP_INSTALL OFF CACHE BOOL "")
-set(CRYPTOPP_SOURCES "${CMAKE_SOURCE_DIR}/externals/cryptopp" CACHE STRING "")
-add_subdirectory(cryptopp-cmake)
-
+if (NOT USE_SYSTEM_CRYPTOPP)
+    set(CRYPTOPP_BUILD_DOCUMENTATION OFF CACHE BOOL "")
+    set(CRYPTOPP_BUILD_TESTING OFF CACHE BOOL "")
+    set(CRYPTOPP_INSTALL OFF CACHE BOOL "")
+    set(CRYPTOPP_SOURCES "${CMAKE_SOURCE_DIR}/externals/cryptopp" CACHE STRING "")
+    add_subdirectory(cryptopp-cmake)
+else()
+    find_library(CRYPTOPP_LIBS cryptopp REQUIRED)
+endif()
 # HACK: The logic to set up the base include directory for CryptoPP does not work with Android SDK CMake 3.22.1.
 # Until there is a fixed version available, this code will detect and add in the proper include if it does not exist.
 if(ANDROID)
@@ -68,12 +71,20 @@ target_include_directories(dds-ktx INTERFACE ./dds-ktx)

 # fmt and Xbyak need to be added before dynarmic
 # libfmt
-option(FMT_INSTALL "" ON)
-add_subdirectory(fmt EXCLUDE_FROM_ALL)
+if (NOT USE_SYSTEM_FMT)
+    option(FMT_INSTALL "" ON)
+    add_subdirectory(fmt EXCLUDE_FROM_ALL)
+else()
+    find_package(fmt REQUIRED)
+endif()

 # Xbyak
 if ("x86_64" IN_LIST ARCHITECTURE)
-    add_subdirectory(xbyak EXCLUDE_FROM_ALL)
+    if (NOT USE_SYSTEM_XBYAK)
+        add_subdirectory(xbyak EXCLUDE_FROM_ALL)
+    else()
+        find_path(XBYAK_INCLUDE xbyak.h PATH_SUFFIXES xbyak REQUIRED)
+    endif()
 endif()

 # Dynarmic
@@ -92,15 +103,23 @@ endif()
 add_subdirectory(glad)

 # glslang
-set(SKIP_GLSLANG_INSTALL ON CACHE BOOL "")
-set(ENABLE_GLSLANG_BINARIES OFF CACHE BOOL "")
-set(ENABLE_SPVREMAPPER OFF CACHE BOOL "")
-set(ENABLE_CTEST OFF CACHE BOOL "")
-set(ENABLE_HLSL OFF CACHE BOOL "")
-add_subdirectory(glslang)
+if (NOT USE_SYSTEM_GLSLANG)
+    set(SKIP_GLSLANG_INSTALL ON CACHE BOOL "")
+    set(ENABLE_GLSLANG_BINARIES OFF CACHE BOOL "")
+    set(ENABLE_SPVREMAPPER OFF CACHE BOOL "")
+    set(ENABLE_CTEST OFF CACHE BOOL "")
+    set(ENABLE_HLSL OFF CACHE BOOL "")
+    add_subdirectory(glslang)
+else()
+    find_package(glslang REQUIRED)
+endif()

 # inih
-add_subdirectory(inih)
+if (NOT USE_SYSTEM_INIH)
+    add_subdirectory(inih)
+else()
+    find_library(INIH_LIBS INIReader REQUIRED)
+endif()

 # MicroProfile
 add_library(microprofile INTERFACE)
@@ -130,7 +149,11 @@ add_subdirectory(soundtouch EXCLUDE_FROM_ALL)
 add_subdirectory(sirit EXCLUDE_FROM_ALL)

 # Teakra
-add_subdirectory(teakra EXCLUDE_FROM_ALL)
+if (NOT USE_SYSTEM_TEAKRA)
+    add_subdirectory(teakra EXCLUDE_FROM_ALL)
+else()
+    find_library(TEAKRA_LIBS teakra REQUIRED)
+endif()

 # SDL2
 if (ENABLE_SDL2 AND NOT USE_SYSTEM_SDL2)
@@ -148,19 +171,31 @@ endif()
 set(ZSTD_LEGACY_SUPPORT OFF)
 set(ZSTD_BUILD_PROGRAMS OFF)
 set(ZSTD_BUILD_SHARED OFF)
-add_subdirectory(zstd/build/cmake EXCLUDE_FROM_ALL)
-target_include_directories(libzstd_static INTERFACE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/externals/zstd/lib>)
+if (NOT USE_SYSTEM_ZSTD)
+    add_subdirectory(zstd/build/cmake EXCLUDE_FROM_ALL)
+    target_include_directories(libzstd_static INTERFACE $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/externals/zstd/lib>)
+else()
+    find_library(ZSTD_LIBS zstd REQUIRED)
+endif()

 # ENet
-add_subdirectory(enet)
-target_include_directories(enet INTERFACE ./enet/include)
+if (NOT USE_SYSTEM_ENET)
+    add_subdirectory(enet)
+    target_include_directories(enet INTERFACE ./enet/include)
+else()
+    find_library(ENET_LIBS enet REQUIRED)
+endif()

 # Cubeb
 if (ENABLE_CUBEB)
-    set(BUILD_TESTS OFF CACHE BOOL "")
-    set(BUILD_TOOLS OFF CACHE BOOL "")
-    set(BUNDLE_SPEEX ON CACHE BOOL "")
-    add_subdirectory(cubeb EXCLUDE_FROM_ALL)
+    if (NOT USE_SYSTEM_CUBEB)
+        set(BUILD_TESTS OFF CACHE BOOL "")
+        set(BUILD_TOOLS OFF CACHE BOOL "")
+        set(BUNDLE_SPEEX ON CACHE BOOL "")
+        add_subdirectory(cubeb EXCLUDE_FROM_ALL)
+    else()
+        find_package(cubeb REQUIRED)
+    endif()
 endif()

 # DiscordRPC
@@ -222,15 +257,19 @@ endif()

 # OpenAL Soft
 if (ENABLE_OPENAL)
-    set(ALSOFT_EMBED_HRTF_DATA OFF CACHE BOOL "")
-    set(ALSOFT_EXAMPLES OFF CACHE BOOL "")
-    set(ALSOFT_INSTALL OFF CACHE BOOL "")
-    set(ALSOFT_INSTALL_CONFIG OFF CACHE BOOL "")
-    set(ALSOFT_INSTALL_HRTF_DATA OFF CACHE BOOL "")
-    set(ALSOFT_INSTALL_AMBDEC_PRESETS OFF CACHE BOOL "")
-    set(ALSOFT_UTILS OFF CACHE BOOL "")
-    set(LIBTYPE "STATIC" CACHE STRING "")
-    add_subdirectory(openal-soft EXCLUDE_FROM_ALL)
+    if (USE_SYSTEM_OPENAL)
+        find_package(OpenAL REQUIRED)
+    else()
+        set(ALSOFT_EMBED_HRTF_DATA OFF CACHE BOOL "")
+        set(ALSOFT_EXAMPLES OFF CACHE BOOL "")
+        set(ALSOFT_INSTALL OFF CACHE BOOL "")
+        set(ALSOFT_INSTALL_CONFIG OFF CACHE BOOL "")
+        set(ALSOFT_INSTALL_HRTF_DATA OFF CACHE BOOL "")
+        set(ALSOFT_INSTALL_AMBDEC_PRESETS OFF CACHE BOOL "")
+        set(ALSOFT_UTILS OFF CACHE BOOL "")
+        set(LIBTYPE "STATIC" CACHE STRING "")
+        add_subdirectory(openal-soft EXCLUDE_FROM_ALL)
+    endif()
 endif()

 # VMA
diff --git a/src/audio_core/CMakeLists.txt b/src/audio_core/CMakeLists.txt
index 4385cdf5f..4e31196f8 100644
--- a/src/audio_core/CMakeLists.txt
+++ b/src/audio_core/CMakeLists.txt
@@ -92,9 +92,13 @@ if(ENABLE_CUBEB)
 endif()

 if(ENABLE_OPENAL)
-    target_link_libraries(audio_core PRIVATE OpenAL)
     target_compile_definitions(audio_core PUBLIC HAVE_OPENAL)
-    add_definitions(-DAL_LIBTYPE_STATIC)
+    if (USE_SYSTEM_OPENAL)
+        target_link_libraries(audio_core PRIVATE ${OPENAL_LIBRARY})
+    else()
+        target_link_libraries(audio_core PRIVATE OpenAL)
+        add_definitions(-DAL_LIBTYPE_STATIC)
+    endif()
 endif()

 if (CITRA_USE_PRECOMPILED_HEADERS)
diff --git a/src/citra/CMakeLists.txt b/src/citra/CMakeLists.txt
index 4e20b14d4..8401d0bb1 100644
--- a/src/citra/CMakeLists.txt
+++ b/src/citra/CMakeLists.txt
@@ -19,7 +19,12 @@ add_executable(citra
 create_target_directory_groups(citra)

 target_link_libraries(citra PRIVATE citra_common citra_core input_common network)
-target_link_libraries(citra PRIVATE inih glad)
+target_link_libraries(citra PRIVATE glad)
+if (NOT USE_SYSTEM_INIH)
+    target_link_libraries(citra PRIVATE inih)
+else()
+    target_link_libraries(citra PRIVATE ${INIH_LIBS})
+endif()
 if (MSVC)
     target_link_libraries(citra PRIVATE getopt)
 endif()
diff --git a/src/common/CMakeLists.txt b/src/common/CMakeLists.txt
index d5500a432..60df3262c 100644
--- a/src/common/CMakeLists.txt
+++ b/src/common/CMakeLists.txt
@@ -162,11 +162,14 @@ else()
     $<$<CXX_COMPILER_ID:Clang>:-fsized-deallocation>
   )
 endif()
-
 create_target_directory_groups(citra_common)

-target_link_libraries(citra_common PUBLIC fmt::fmt library-headers microprofile Boost::boost Boost::serialization Boost::iostreams)
-target_link_libraries(citra_common PRIVATE libzstd_static)
+target_link_libraries(citra_common PUBLIC fmt library-headers microprofile Boost::boost Boost::serialization Boost::iostreams)
+if (NOT USE_SYSTEM_ZSTD)
+    target_link_libraries(citra_common PRIVATE libzstd_static)
+else()
+    target_link_libraries(citra_common PUBLIC zstd)
+endif()
 set_target_properties(citra_common PROPERTIES INTERPROCEDURAL_OPTIMIZATION ${ENABLE_LTO})

 if ("x86_64" IN_LIST ARCHITECTURE)
@@ -177,8 +180,6 @@ if (CITRA_USE_PRECOMPILED_HEADERS)
     target_precompile_headers(citra_common PRIVATE precompiled_headers.h)
 endif()

-find_library(BACKTRACE_LIBRARY backtrace)
-if (BACKTRACE_LIBRARY AND ${CMAKE_SYSTEM_NAME} STREQUAL "Linux" AND CMAKE_CXX_COMPILER_ID STREQUAL GNU)
-    target_link_libraries(citra_common PRIVATE ${BACKTRACE_LIBRARY} dl)
-    target_compile_definitions(citra_common PRIVATE CITRA_LINUX_GCC_BACKTRACE)
+if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux" AND CMAKE_CXX_COMPILER_ID STREQUAL GNU)
+  target_link_libraries(citra_common PRIVATE dl)
 endif()
diff --git a/src/common/logging/backend.cpp b/src/common/logging/backend.cpp
index f39c79dea..d0758388f 100644
--- a/src/common/logging/backend.cpp
+++ b/src/common/logging/backend.cpp
@@ -13,8 +13,7 @@
 #define _SH_DENYWR 0
 #endif

-#ifdef CITRA_LINUX_GCC_BACKTRACE
-#define BOOST_STACKTRACE_USE_BACKTRACE
+#if defined(__linux__) && defined(__GNUG__) && !defined(__clang__)
 #include <boost/stacktrace.hpp>
 #undef BOOST_STACKTRACE_USE_BACKTRACE
 #include <signal.h>
diff --git a/src/core/CMakeLists.txt b/src/core/CMakeLists.txt
index 5ac61ce23..56a2216a4 100644
--- a/src/core/CMakeLists.txt
+++ b/src/core/CMakeLists.txt
@@ -476,7 +476,7 @@ create_target_directory_groups(citra_core)

 target_link_libraries(citra_core PUBLIC citra_common PRIVATE audio_core network video_core)
 target_link_libraries(citra_core PRIVATE Boost::boost Boost::serialization Boost::iostreams httplib)
-target_link_libraries(citra_core PUBLIC dds-ktx PRIVATE cryptopp fmt::fmt lodepng open_source_archives)
+target_link_libraries(citra_core PUBLIC dds-ktx PRIVATE cryptopp fmt lodepng open_source_archives)
 set_target_properties(citra_core PROPERTIES INTERPROCEDURAL_OPTIMIZATION ${ENABLE_LTO})

 if (ENABLE_WEB_SERVICE)
--
2.41.0

