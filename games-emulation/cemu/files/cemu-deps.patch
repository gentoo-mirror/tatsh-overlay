diff --git a/.github/workflows/build.yml b/.github/workflows/build.yml
index 8a8dddf..38efbf2 100644
--- a/.github/workflows/build.yml
+++ b/.github/workflows/build.yml
@@ -70,15 +70,15 @@ jobs:
         -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
         
     - name: "cmake"
+      run: cmake -B build ${{ env.BUILD_FLAGS }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_MODE }} -DCMAKE_C_COMPILER=/usr/bin/clang-12 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-12 -G Ninja -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -DENABLE_VCPKG=true
+
+    - name: debugging
       run: |
-        mkdir -p build
-        cd build
-        cmake .. ${{ env.BUILD_FLAGS }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_MODE }} -DCMAKE_C_COMPILER=/usr/bin/clang-12 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-12 -G Ninja -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja
-        
+        cat /home/runner/work/Cemu/Cemu/build/vcpkg_installed/x64-linux/include/glslang/Include/ResourceLimits.h || printf 'glslang/Include/ResourceLimits.h not here\n\n\n\n\n----------------------------------------------------------------\n\n\n\n\n'
+        cat /home/runner/work/Cemu/Cemu/build/vcpkg_installed/x64-linux/include/glslang/build_info.h || printf 'glslang/build_info.h not here\n'
+
     - name: "Build Cemu"
-      run: |
-        cd build
-        ninja
+      run: cmake --build build
         
     - name: Upload artifact
       uses: actions/upload-artifact@v3
diff --git a/.gitignore b/.gitignore
index 85a5924..c858991 100644
--- a/.gitignore
+++ b/.gitignore
@@ -20,6 +20,7 @@ out/
 bin/Cemu
 
 # Cemu bin files
+/bin/Cemu
 bin/otp.bin
 bin/seeprom.bin
 bin/Cemu.pdb
@@ -33,4 +34,4 @@ bin/shaderCache/*
 bin/controllerProfiles/*
 
 !bin/gameProfiles/default/*
-bin/gameProfiles/*
\ No newline at end of file
+bin/gameProfiles/*
diff --git a/BUILD.md b/BUILD.md
index ab0dd10..4c1d0e1 100644
--- a/BUILD.md
+++ b/BUILD.md
@@ -3,6 +3,7 @@
 ## Windows
 
 Prerequisites:
+
 - A recent version of Visual Studio 2022 with CMake tools component
 - git
 
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9666005..490db0f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,26 +1,34 @@
 cmake_minimum_required(VERSION 3.21.1)
 
 option(PUBLIC_RELEASE "Compile with debug asserts disabled and no console" OFF)
-
-if (PUBLIC_RELEASE)
-  add_definitions(-DPUBLIC_RELEASE)
-  set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE) # enable LTO
+option(ENABLE_VCPKG "Enable the vcpkg package manager" ON)
+
+if (ENABLE_VCPKG)
+	set(VCPKG_OVERLAY_PORTS "${CMAKE_CURRENT_LIST_DIR}/dependencies/vcpkg_overlay_ports")
+	set(CMAKE_TOOLCHAIN_FILE "${CMAKE_CURRENT_SOURCE_DIR}/dependencies/vcpkg/scripts/buildsystems/vcpkg.cmake"
+		CACHE STRING "Vcpkg toolchain file")
+	# Set this so that all the various find_package() calls don't need an explicit
+	# CONFIG option
+	set(CMAKE_FIND_PACKAGE_PREFER_CONFIG TRUE)
+	if (WIN32)
+		set(VCPKG_TARGET_TRIPLET "x64-windows-static" CACHE STRING "")
+	endif()
 endif()
 
-if (WIN32)
-  set(VCPKG_TARGET_TRIPLET "x64-windows-static" CACHE STRING "")
-endif()
+project(Cemu VERSION 2.0)
 
-set(VCPKG_OVERLAY_PORTS "${CMAKE_CURRENT_LIST_DIR}/dependencies/vcpkg_overlay_ports")
-set(CMAKE_TOOLCHAIN_FILE "${CMAKE_CURRENT_SOURCE_DIR}/dependencies/vcpkg/scripts/buildsystems/vcpkg.cmake"
-  CACHE STRING "Vcpkg toolchain file")
+list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
 
-project(Cemu VERSION 0.1)
 set(CMAKE_CXX_STANDARD 20)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 
 set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
 
+if (PUBLIC_RELEASE)
+	add_compile_definitions("PUBLIC_RELEASE")
+	set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE) # enable LTO
+endif()
+
 set_property(GLOBAL PROPERTY USE_FOLDERS ON)
 
 if (MSVC)
@@ -28,13 +36,12 @@ if (MSVC)
 endif()
 
 if (MSVC)
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc")
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /fp:precise") # floating point model: precise
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /GT") # fiber safe optimizations
-  if (PUBLIC_RELEASE)
-    message(STATUS "Using additional optimization flags for MSVC")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Oi /Ot") # enable intrinsic functions, favor speed
-  endif()
+# floating point model: precise, fiber safe optimizations
+	add_compile_options("/EHsc" "/fp:precise" "/GT")
+	if (PUBLIC_RELEASE)
+		message(STATUS "Using additional optimization flags for MSVC")
+		add_compile_options("/Oi" "/Ot") # enable intrinsic functions, favor speed
+	endif()
 endif()
 
 option(ENABLE_OPENGL "Enables the OpenGL backend" ON)
@@ -43,73 +50,81 @@ option(ENABLE_DISCORD_RPC "Enables the Discord Rich Presence feature" ON)
 
 # input backends
 if (WIN32)
-  option(ENABLE_XINPUT "Enables the usage of XInput" ON)
-  option(ENABLE_DIRECTINPUT "Enables the usage of DirectInput" ON)
-  add_definitions(-DHAS_DIRECTINPUT)
+	option(ENABLE_XINPUT "Enables the usage of XInput" ON)
+	option(ENABLE_DIRECTINPUT "Enables the usage of DirectInput" ON)
+	add_compile_definitions("HAS_DIRECTINPUT")
 endif()
 option(ENABLE_SDL "Enables the SDLController backend" ON)
 
 # audio backends
 if (WIN32)
-  option(ENABLE_DIRECTAUDIO "Enables the directaudio backend" ON)
-  option(ENABLE_XAUDIO "Enables the xaudio backend" ON)
+	option(ENABLE_DIRECTAUDIO "Enables the directaudio backend" ON)
+	option(ENABLE_XAUDIO "Enables the xaudio backend" ON)
 endif()
 option(ENABLE_CUBEB "Enabled cubeb backend" ON)
 
 option(ENABLE_WXWIDGETS "Build with wxWidgets UI (Currently required)" ON)
 
-find_package(SDL2 CONFIG REQUIRED)
-find_package(CURL CONFIG REQUIRED)
-find_package(pugixml CONFIG REQUIRED)
-find_package(imgui CONFIG REQUIRED)
-find_package(RapidJSON CONFIG REQUIRED)
+set(THREADS_PREFER_PTHREAD_FLAG true)
+find_package(Threads REQUIRED)
+find_package(SDL2 REQUIRED)
+find_package(CURL REQUIRED)
+find_package(pugixml REQUIRED)
+find_package(imgui REQUIRED)
+find_package(RapidJSON REQUIRED)
 find_package(Boost COMPONENTS program_options filesystem nowide REQUIRED)
 find_package(libzip REQUIRED)
 find_package(glslang REQUIRED)
 find_package(ZLIB REQUIRED)
-find_package(zstd CONFIG REQUIRED)
+find_package(zstd MODULE REQUIRED) # MODULE so that zstd::zstd is available
+find_package(OpenSSL COMPONENTS Crypto SSL REQUIRED)
+find_package(X11)
+find_package(glm REQUIRED)
+find_package(fmt 7.0.0 REQUIRED)
+find_package(PNG REQUIRED)
+
+# glslang versions older than 11.11.0 define targets without a namespace
+if (NOT TARGET glslang::SPIRV AND TARGET SPIRV)
+	add_library(glslang::SPIRV ALIAS SPIRV)
+endif()
 
 if (ENABLE_VULKAN)
-  include_directories("dependencies/Vulkan-Headers/include")
+	include_directories("dependencies/Vulkan-Headers/include")
 endif()
 
 if (ENABLE_OPENGL)
-  find_package(OpenGL REQUIRED)
+	find_package(OpenGL REQUIRED)
 endif()
 
 if (ENABLE_DISCORD_RPC)
-  add_definitions(-DENABLE_DISCORD_RPC)
-  add_subdirectory(dependencies/discord-rpc EXCLUDE_FROM_ALL)
-  target_include_directories(discord-rpc INTERFACE ./dependencies/discord-rpc/include)
-endif()
-
-if (ENABLE_WXWIDGETS)
-  find_package(wxWidgets CONFIG REQUIRED)
+	add_compile_definitions(ENABLE_DISCORD_RPC)
+	add_subdirectory("dependencies/discord-rpc" EXCLUDE_FROM_ALL)
+	target_include_directories(discord-rpc INTERFACE "./dependencies/discord-rpc/include")
 endif()
 
-find_package(OpenSSL REQUIRED)
-find_package(X11)
-
-# find a better way to handle this
-link_libraries(${Boost_LIBRARIES})
-link_libraries(${X11_LIBRARIES})
-link_libraries(SDL2::SDL2 SDL2::SDL2main SDL2::SDL2-static)
 if (ENABLE_WXWIDGETS)
-  link_libraries(wx::core wx::base)
+	find_package(wxWidgets 3.2 REQUIRED COMPONENTS base core gl propgrid xrc)
 endif()
 
 if (ENABLE_CUBEB)
-  option(BUILD_TESTS "" OFF)
-  option(BUILD_TOOLS "" OFF)
-  option(BUNDLE_SPEEX "" OFF)
-  set(USE_WINMM OFF CACHE BOOL "")
-  add_subdirectory(dependencies/cubeb)
-  set_property(TARGET cubeb PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
-  link_libraries(cubeb)
-  add_compile_definitions(HAS_CUBEB=1)
+	find_package(cubeb)
+	if (NOT cubeb_FOUND)
+		option(BUILD_TESTS "" OFF)
+		option(BUILD_TOOLS "" OFF)
+		option(BUNDLE_SPEEX "" OFF)
+		set(USE_WINMM OFF CACHE BOOL "")
+		add_subdirectory("dependencies/cubeb")
+		set_property(TARGET cubeb PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
+		add_library(cubeb::cubeb ALIAS cubeb)
+	endif()
+	add_compile_definitions("HAS_CUBEB=1")
 endif()
 
-add_subdirectory(dependencies/ih264d)
-add_subdirectory(dependencies/ZArchive)
+add_subdirectory("dependencies/ih264d")
+
+find_package(ZArchive)
+if (NOT ZArchive_FOUND)
+	add_subdirectory("dependencies/ZArchive")
+endif()
 
-add_subdirectory(src)
\ No newline at end of file
+add_subdirectory(src)
diff --git a/cmake/FindZArchive.cmake b/cmake/FindZArchive.cmake
new file mode 100644
index 0000000..0c4b771
--- /dev/null
+++ b/cmake/FindZArchive.cmake
@@ -0,0 +1,20 @@
+# SPDX-FileCopyrightText: 2022 Andrea Pappacoda <andrea@pappacoda.it>
+# SPDX-License-Identifier: ISC
+
+find_package(PkgConfig)
+
+if (PKG_CONFIG_FOUND)
+	pkg_search_module(zarchive IMPORTED_TARGET GLOBAL zarchive)
+	if (zarchive_FOUND)
+		add_library(ZArchive::zarchive ALIAS PkgConfig::zarchive)
+	endif()
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(ZArchive
+	REQUIRED_VARS
+		zarchive_LINK_LIBRARIES
+		zarchive_FOUND
+	VERSION_VAR
+		zarchive_VERSION
+)
diff --git a/cmake/Findimgui.cmake b/cmake/Findimgui.cmake
new file mode 100644
index 0000000..7c7b1eb
--- /dev/null
+++ b/cmake/Findimgui.cmake
@@ -0,0 +1,20 @@
+# SPDX-FileCopyrightText: 2022 Andrea Pappacoda <andrea@pappacoda.it>
+# SPDX-License-Identifier: ISC
+
+find_package(PkgConfig)
+
+if (PKG_CONFIG_FOUND)
+	pkg_search_module(imgui IMPORTED_TARGET GLOBAL imgui)
+	if (imgui_FOUND)
+		add_library(imgui::imgui ALIAS PkgConfig::imgui)
+	endif()
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(imgui
+	REQUIRED_VARS
+		imgui_LINK_LIBRARIES
+		imgui_FOUND
+	VERSION_VAR
+		imgui_VERSION
+)
diff --git a/cmake/FindwxWidgets.cmake b/cmake/FindwxWidgets.cmake
new file mode 100644
index 0000000..46abca0
--- /dev/null
+++ b/cmake/FindwxWidgets.cmake
@@ -0,0 +1,49 @@
+# SPDX-FileCopyrightText: 2022 Andrea Pappacoda <andrea@pappacoda.it>
+# SPDX-License-Identifier: ISC
+
+include(FindPackageHandleStandardArgs)
+find_package(wxWidgets CONFIG COMPONENTS ${wxWidgets_FIND_COMPONENTS})
+
+if (wxWidgets_FOUND)
+	# Use upstream wxWidgetsConfig.cmake if possible
+	find_package_handle_standard_args(wxWidgets CONFIG_MODE)
+else()
+	# Fall back to CMake's FindwxWidgets
+	# Temporarily unset CMAKE_MODULE_PATH to avoid calling the current find
+	# module recursively
+	set(_tmp_module_path "${CMAKE_MODULE_PATH}")
+	set(CMAKE_MODULE_PATH "")
+
+	find_package(wxWidgets MODULE QUIET COMPONENTS ${wxWidgets_FIND_COMPONENTS})
+
+	set(CMAKE_MODULE_PATH "${_tmp_module_path}")
+	unset(_tmp_module_path)
+
+	if (wxWidgets_FOUND)
+		add_library(wx::base IMPORTED INTERFACE)
+		target_include_directories(wx::base INTERFACE ${wxWidgets_INCLUDE_DIRS})
+		target_link_libraries(wx::base INTERFACE ${wxWidgets_LIBRARIES})
+		target_link_directories(wx::base INTERFACE ${wxWidgets_LIBRARY_DIRS})
+		target_compile_definitions(wx::base INTERFACE ${wxWidgets_DEFINITIONS})
+		target_compile_options(wx::base INTERFACE ${wxWidgets_CXX_FLAGS})
+
+		# FindwxWidgets sets everything into a single set of variables, so it is
+		# impossible to tell what libraries are required for what component.
+		# To be compatible with wxWidgetsConfig, we create an alias for each
+		# component so that the user can still use target_link_libraries(wx::gl)
+		foreach(component ${wxWidgets_FIND_COMPONENTS})
+			if (NOT component STREQUAL "base")
+				# don't alias base to itself
+				add_library(wx::${component} ALIAS wx::base)
+			endif()
+		endforeach()
+	endif()
+
+	find_package_handle_standard_args(wxWidgets
+		REQUIRED_VARS
+			wxWidgets_LIBRARIES
+			wxWidgets_FOUND
+		VERSION_VAR
+			wxWidgets_VERSION_STRING
+	)
+endif()
diff --git a/cmake/Findzstd.cmake b/cmake/Findzstd.cmake
new file mode 100644
index 0000000..a8a45a6
--- /dev/null
+++ b/cmake/Findzstd.cmake
@@ -0,0 +1,33 @@
+# SPDX-FileCopyrightText: 2022 Andrea Pappacoda <andrea@pappacoda.it>
+# SPDX-License-Identifier: ISC
+
+include(FindPackageHandleStandardArgs)
+
+find_package(zstd CONFIG)
+if (zstd_FOUND)
+	# Use upstream zstdConfig.cmake if possible
+	if (NOT TARGET zstd::zstd)
+		if (TARGET zstd::libzstd_static)
+			add_library(zstd::zstd ALIAS zstd::libzstd_static)
+		elseif (TARGET zstd::libzstd_shared)
+			add_library(zstd::zstd ALIAS zstd::libzstd_shared)
+		endif()
+	endif()
+	find_package_handle_standard_args(zstd CONFIG_MODE)
+else()
+	# Fallback to pkg-config otherwise
+	find_package(PkgConfig)
+	if (PKG_CONFIG_FOUND)
+		pkg_search_module(libzstd IMPORTED_TARGET GLOBAL libzstd)
+		if (libzstd_FOUND)
+			add_library(zstd::zstd ALIAS PkgConfig::libzstd)
+		endif()
+	endif()
+
+	find_package_handle_standard_args(zstd
+		REQUIRED_VARS
+			libzstd_LINK_LIBRARIES
+			libzstd_FOUND
+		VERSION_VAR libzstd_VERSION
+	)
+endif()
diff --git a/dependencies/discord-rpc/src/CMakeLists.txt b/dependencies/discord-rpc/src/CMakeLists.txt
index 2eeacf4..afd8902 100644
--- a/dependencies/discord-rpc/src/CMakeLists.txt
+++ b/dependencies/discord-rpc/src/CMakeLists.txt
@@ -98,8 +98,7 @@ if(UNIX)
     endif (APPLE)
 endif(UNIX)
 
-target_link_libraries(discord-rpc PRIVATE rapidjson)
-#target_include_directories(discord-rpc PRIVATE ${RAPIDJSON}/include)
+target_include_directories(discord-rpc PRIVATE ${RAPIDJSON_INCLUDE_DIRS})
 
 if (NOT ${ENABLE_IO_THREAD})
     target_compile_definitions(discord-rpc PUBLIC -DDISCORD_DISABLE_IO_THREAD)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index fd2c4ad..b110024 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -2,23 +2,21 @@ project(cemuMain)
 
 option(CEMU_CXX_FLAGS "Additional flags used for compiling Cemu source code")
 if(CEMU_CXX_FLAGS)
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CEMU_CXX_FLAGS}")
+	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CEMU_CXX_FLAGS}")
 endif()
 
-if(CMAKE_SIZEOF_VOID_P EQUAL 8)
-    # all ok
-else()
-    message( FATAL_ERROR "Pointers are not 64bit" )
+if(NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
+	message( FATAL_ERROR "Pointers are not 64bit" )
 endif()
 
 if(MSVC)
-    add_definitions(-DWIN32_LEAN_AND_MEAN)
-    add_definitions(-DCURL_STATICLIB)
-    #add_definitions(-DVK_USE_PLATFORM_WIN32_KHR)
-    # _CRT_SECURE_NO_WARNINGS
-    # _WINSOCK_DEPRECATED_NO_WARNINGS
-    # _SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING
-    # _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS
+	add_definitions(-DWIN32_LEAN_AND_MEAN)
+	add_definitions(-DCURL_STATICLIB)
+	#add_definitions(-DVK_USE_PLATFORM_WIN32_KHR)
+	# _CRT_SECURE_NO_WARNINGS
+	# _WINSOCK_DEPRECATED_NO_WARNINGS
+	# _SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING
+	# _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS
 elseif(UNIX)
     if(NOT APPLE)
         add_definitions(-DVK_USE_PLATFORM_XLIB_KHR) # legacy. Do we need to support XLIB surfaces?
@@ -66,31 +64,37 @@ endif()
 target_precompile_headers(CemuBin PRIVATE Common/precompiled.h)
 
 if(WIN32)
-  target_sources(CemuBin PRIVATE
-  resource/cemu.rc
-  )
+	target_sources(CemuBin PRIVATE
+	resource/cemu.rc
+)
 endif()
 
 set_property(TARGET CemuBin PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
 
 set_target_properties(CemuBin PROPERTIES
-        RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR}/../bin/
-        RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/../bin/
-        OUTPUT_NAME "Cemu"
-        )
+	RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/../bin/
+	OUTPUT_NAME "Cemu"
+)
+
+target_link_libraries(CemuBin PRIVATE
+	CemuAudio
+	CemuCafe
+	CemuCommon
+	CemuComponents
+	CemuConfig
+	CemuGui
+	CemuInput
+	CemuUtil
+)
 
-target_link_libraries(CemuBin PRIVATE CemuCommon CemuComponents CemuCafe CemuConfig CemuGui CemuAudio CemuInput CemuUtil)
 target_link_libraries(CemuBin PRIVATE CemuAsm)
-target_link_libraries(CemuBin PRIVATE OpenSSL::SSL)
+target_link_libraries(CemuBin PRIVATE OpenSSL::SSL OpenSSL::Crypto)
 target_link_libraries(CemuBin PRIVATE ZLIB::ZLIB)
-target_link_libraries(CemuBin PRIVATE ${wxWidgets_LIBRARIES})
 target_link_libraries(CemuBin PRIVATE CURL::libcurl)
-target_link_libraries(CemuBin PRIVATE imgui::imgui)
 target_link_libraries(CemuBin PRIVATE pugixml pugixml::static pugixml::pugixml)
+target_link_libraries(CemuBin PRIVATE SDL2::SDL2 SDL2::SDL2main) # is SDL2main needed?
+target_link_libraries(CemuBin PRIVATE imguiImpl OpenGL::GL)
 
-target_link_libraries(CemuBin PUBLIC
-CemuCommon CemuAudio CemuInput CemuComponents CemuCafe CemuConfig CemuGui imguiImpl)
-
-# needed because of some cyclic dependencies. fix this
-target_link_libraries(CemuBin PUBLIC
-CemuCommon CemuInput CemuComponents CemuCafe CemuResource CemuGui CemuAsm)
+if (ENABLE_WXWIDGETS)
+	target_link_libraries(CemuBin PRIVATE wx::base wx::core)
+endif()
diff --git a/src/Cafe/CMakeLists.txt b/src/Cafe/CMakeLists.txt
index ae0b3e6..ed1baea 100644
--- a/src/Cafe/CMakeLists.txt
+++ b/src/Cafe/CMakeLists.txt
@@ -1,7 +1,5 @@
 project(CemuCafe)
 
-include_directories(".")
-
 if((CMAKE_C_COMPILER_ID STREQUAL "GNU") OR (CMAKE_C_COMPILER_ID STREQUAL "Clang"))
 	add_compile_options(-mssse3 -mavx2)
 endif()
@@ -14,20 +12,41 @@ set_property(TARGET CemuCafe PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CON
 
 target_precompile_headers(CemuCafe PRIVATE ../Common/precompiled.h)
 
-target_include_directories(CemuCafe PRIVATE ../)
+target_include_directories(CemuCafe PUBLIC "../")
 
 #target_link_libraries(CemuCafe ZArchivexx)
 #target_link_libraries(CemuCafe CemuCommon CemuCore CemuConfig CemuUtil CemuResource)
 #target_link_libraries(CemuCafe OpenSSL::SSL)
 #target_link_libraries(CemuCafe ZLIB::ZLIB)
-#target_link_libraries(CemuCafe imgui::imgui)
 #target_link_libraries(CemuCafe imguiImpl)
 #target_link_libraries(CemuCafe pugixml pugixml::static pugixml::pugixml)
 #target_link_libraries(CemuCafe libzip::zip)
-target_link_libraries(CemuCafe glslang SPIRV)
-target_link_libraries(CemuCafe ih264d zarchive)
 #target_link_libraries(CemuCafe zstd::libzstd_static)
 
-IF(WIN32)
-target_link_libraries(CemuCafe iphlpapi)
-ENDIF()
\ No newline at end of file
+target_link_libraries(CemuCafe PRIVATE
+	CemuAsm
+	CemuAudio
+	CemuCommon
+	CemuComponents
+	CemuConfig
+	CemuGui
+	CemuInput
+	CemuResource
+	CemuUtil
+	imguiImpl
+	imgui::imgui
+	PNG::PNG
+	glslang::SPIRV
+	ih264d
+	ZArchive::zarchive
+	Boost::headers
+	Boost::nowide
+)
+
+if (ENABLE_WXWIDGETS)
+	target_link_libraries(CemuCafe PRIVATE wx::base wx::core)
+endif()
+
+if(WIN32)
+	target_link_libraries(CemuCafe iphlpapi)
+endif()
diff --git a/src/Cafe/HW/Latte/Renderer/Vulkan/RendererShaderVk.cpp b/src/Cafe/HW/Latte/Renderer/Vulkan/RendererShaderVk.cpp
index 0d41156..09acaed 100644
--- a/src/Cafe/HW/Latte/Renderer/Vulkan/RendererShaderVk.cpp
+++ b/src/Cafe/HW/Latte/Renderer/Vulkan/RendererShaderVk.cpp
@@ -3,17 +3,13 @@
 #if __has_include(<glslang/build_info.h>)
 #include <glslang/build_info.h>
 #else
-#define GLSLANG_VERSION_LESS_OR_EQUAL_TO (false)
+#define GLSLANG_VERSION_GREATER_OR_EQUAL_TO (false)
 #endif
 
+#include <glslang/Include/ResourceLimits.h> // TBuiltInResource
 #include <glslang/Public/ShaderLang.h>
-#if GLSLANG_VERSION_LESS_OR_EQUAL_TO(11, 0, 0)
 #include <glslang/SPIRV/GlslangToSpv.h>
-#else
-#include <SPIRV/Logger.h>
-#include <SPIRV/GlslangToSpv.h>
-#endif
-
+#include <glslang/SPIRV/Logger.h>
 
 #include "Cafe/HW/Latte/Renderer/Vulkan/VulkanAPI.h"
 #include "Cafe/HW/Latte/Renderer/Vulkan/VulkanRenderer.h"
@@ -127,7 +123,7 @@ const TBuiltInResource DefaultTBuiltInResource = {
 	/* .maxTaskWorkGroupSizeZ_NV = */ 1,
 	/* .maxMeshViewCountNV = */ 4,
 
-#if GLSLANG_VERSION_LESS_OR_EQUAL_TO(11, 0, 0)
+#if GLSLANG_VERSION_GREATER_OR_EQUAL_TO(11, 8, 1) // FIXME: should be 11, 0, 0
 	/* .maxDualSourceDrawBuffersEXT = */ 1,
 #endif
 
diff --git a/src/Cemu/CMakeLists.txt b/src/Cemu/CMakeLists.txt
index 0e02699..bd8f40a 100644
--- a/src/Cemu/CMakeLists.txt
+++ b/src/Cemu/CMakeLists.txt
@@ -8,9 +8,20 @@ set_property(TARGET CemuComponents PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$
 
 target_precompile_headers(CemuComponents PRIVATE ../Common/precompiled.h)
 
-target_include_directories(CemuComponents PRIVATE ../)
+target_include_directories(CemuComponents PUBLIC "../")
+
+target_link_libraries(CemuComponents PRIVATE
+	CemuCafe
+	CemuCommon
+	CemuConfig
+	CemuGui
+	CemuUtil
+	Boost::headers
+	OpenSSL::Crypto
+	OpenSSL::SSL
+)
 
 if(ENABLE_DISCORD_RPC)
-target_link_libraries(CemuComponents PRIVATE discord-rpc)
+	target_link_libraries(CemuComponents PRIVATE discord-rpc)
 endif()
 target_link_libraries(CemuComponents PRIVATE CemuUtil)
\ No newline at end of file
diff --git a/src/Common/CMakeLists.txt b/src/Common/CMakeLists.txt
index bee159c..eaff1c4 100644
--- a/src/Common/CMakeLists.txt
+++ b/src/Common/CMakeLists.txt
@@ -1,7 +1,5 @@
 project(CemuCommon)
 
-#include_directories(".")
-
 file(GLOB CPP_FILES *.cpp)
 file(GLOB H_FILES *.h)
 add_library(CemuCommon ${CPP_FILES} ${H_FILES})
@@ -9,24 +7,36 @@ add_library(CemuCommon ${CPP_FILES} ${H_FILES})
 set_property(TARGET CemuCommon PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
 
 if(WIN32)
-target_sources(CemuCommon
-PRIVATE
-    windows/platform.cpp
-    windows/platform.h
-)
+	target_sources(CemuCommon PRIVATE
+		windows/platform.cpp
+		windows/platform.h
+	)
 else()
-target_sources(CemuCommon
-PRIVATE
-    unix/platform.cpp
-    unix/platform.h
-)
+	target_sources(CemuCommon PRIVATE
+		unix/platform.cpp
+		unix/platform.h
+	)
 endif()
 
-target_sources(CemuCommon
-        PRIVATE
-        ExceptionHandler/ExceptionHandler.cpp
-        ExceptionHandler/ExceptionHandler.h
-        )
+target_sources(CemuCommon PRIVATE
+	ExceptionHandler/ExceptionHandler.cpp
+	ExceptionHandler/ExceptionHandler.h
+)
 
 target_precompile_headers(CemuCommon PUBLIC precompiled.h)
-target_include_directories(CemuCommon PRIVATE ../)
\ No newline at end of file
+target_include_directories(CemuCommon PUBLIC "../")
+
+target_link_libraries(CemuCommon PRIVATE
+	CemuCafe
+	CemuConfig
+	CemuComponents
+	Boost::nowide
+	Boost::filesystem
+	glm::glm
+	X11::X11
+	X11::Xrender
+	X11::Xutil
+)
+
+# PUBLIC because boost/predef/os.h is included in platform.h
+target_link_libraries(CemuCommon PUBLIC Boost::headers)
diff --git a/src/audio/CMakeLists.txt b/src/audio/CMakeLists.txt
index 6a11033..135fbb7 100644
--- a/src/audio/CMakeLists.txt
+++ b/src/audio/CMakeLists.txt
@@ -1,42 +1,49 @@
 project(CemuAudio)
 
 add_library(CemuAudio
-IAudioAPI.cpp
-IAudioAPI.h
+	IAudioAPI.cpp
+	IAudioAPI.h
 )
 
 set_property(TARGET CemuAudio PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
 
 # move these to UI folder
 target_sources(CemuAudio PRIVATE
-  audioDebuggerWindow.cpp
-  audioDebuggerWindow.h
+	audioDebuggerWindow.cpp
+	audioDebuggerWindow.h
 )
 
 if(WIN32)
-  target_sources(CemuAudio PRIVATE
-      DirectSoundAPI.cpp
-      DirectSoundAPI.h
-      XAudio2API.cpp
-      XAudio2API.h
-      XAudio27API.cpp
-      XAudio27API.h
-  )
+	target_sources(CemuAudio PRIVATE
+		DirectSoundAPI.cpp
+		DirectSoundAPI.h
+		XAudio2API.cpp
+		XAudio2API.h
+		XAudio27API.cpp
+		XAudio27API.h
+	)
 endif()
 
 if(ENABLE_CUBEB)
-  target_sources(CemuAudio PRIVATE
-          CubebAPI.cpp
-          CubebAPI.h
-  )
-  #add_definitions(HAS_CUBEB)
+	target_sources(CemuAudio PRIVATE
+		CubebAPI.cpp
+		CubebAPI.h
+	)
+	#add_definitions(HAS_CUBEB)
 endif()
 
 target_precompile_headers(CemuAudio PRIVATE ../Common/precompiled.h)
 
-#target_link_libraries(CemuAudio CemuCommon CemuGui CemuPlatform)
-target_include_directories(CemuAudio PRIVATE ../)
+target_include_directories(CemuAudio PUBLIC "../")
+
+target_link_libraries(CemuAudio PRIVATE CemuCafe CemuConfig CemuGui CemuUtil)
 
 if(ENABLE_CUBEB)
-  target_link_libraries(CemuAudio cubeb)
+	# PUBLIC because cubeb.h/cubeb.h is included in CubebAPI.h
+	target_link_libraries(CemuAudio PUBLIC cubeb::cubeb)
+endif()
+
+if (ENABLE_WXWIDGETS)
+	# PUBLIC because wx/wx.h is included in audioDebuggerWindow.h
+	target_link_libraries(CemuAudio PUBLIC wx::base wx::core)
 endif()
diff --git a/src/config/CMakeLists.txt b/src/config/CMakeLists.txt
index 4710b5c..1d00982 100644
--- a/src/config/CMakeLists.txt
+++ b/src/config/CMakeLists.txt
@@ -8,4 +8,18 @@ set_property(TARGET CemuConfig PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<C
 
 target_precompile_headers(CemuConfig PRIVATE ../Common/precompiled.h)
 
-target_include_directories(CemuConfig PRIVATE ../)
\ No newline at end of file
+target_include_directories(CemuConfig PUBLIC "../")
+
+target_link_libraries(CemuConfig PRIVATE
+	CemuCafe
+	CemuCommon
+	CemuUtil
+	Boost::headers
+	Boost::program_options
+)
+
+if (ENABLE_WXWIDGETS)
+	# PUBLIC because wx/language.h is included in CemuConfig.h
+	# Could be made PRIVATE by using 0 instead of wxLANGUAGE_DEFAULT
+	target_link_libraries(CemuConfig PUBLIC wx::base wx::core)
+endif()
diff --git a/src/gui/CMakeLists.txt b/src/gui/CMakeLists.txt
index 7d62bc6..59cbd08 100644
--- a/src/gui/CMakeLists.txt
+++ b/src/gui/CMakeLists.txt
@@ -1,7 +1,5 @@
 project(CemuGui)
 
-include_directories(".")
-
 file(GLOB_RECURSE CPP_FILES *.cpp)
 file(GLOB_RECURSE H_FILES *.h)
 add_library(CemuGui ${CPP_FILES} ${H_FILES})
@@ -9,21 +7,37 @@ add_library(CemuGui ${CPP_FILES} ${H_FILES})
 set_property(TARGET CemuGui PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
 
 target_sources(CemuGui PRIVATE
-wxcomponents/checkedlistctrl.cpp
-wxcomponents/checkedlistctrl.h
-wxcomponents/checktree.cpp
-wxcomponents/checktree.h
+	wxcomponents/checkedlistctrl.cpp
+	wxcomponents/checkedlistctrl.h
+	wxcomponents/checktree.cpp
+	wxcomponents/checktree.h
 )
 
 target_precompile_headers(CemuGui PRIVATE ../Common/precompiled.h)
 
-target_include_directories(CemuGui PRIVATE ../)
-
-target_link_libraries(CemuGui ${wxWidgets_LIBRARIES})
-target_link_libraries(CemuGui libzip::zip)
-target_link_libraries(CemuGui CemuCafe CemuComponents CemuResource)
-target_link_libraries(CemuGui zarchive)
+target_include_directories(CemuGui PUBLIC "../")
+# PUBLIC because rapidjson/document.h is included in ChecksumTool.h
+target_include_directories(CemuGui PUBLIC ${RAPIDJSON_INCLUDE_DIRS})
+
+target_link_libraries(CemuGui PRIVATE
+	CemuAudio
+	CemuCafe
+	CemuCommon
+	CemuComponents
+	CemuConfig
+	CemuInput
+	CemuResource
+	CemuUtil
+	Boost::headers
+	libzip::zip
+	ZArchive::zarchive
+)
 
 if(ENABLE_CUBEB)
-    target_link_libraries(CemuGui cubeb)
+	target_link_libraries(CemuGui PRIVATE cubeb::cubeb)
+endif()
+
+if (ENABLE_WXWIDGETS)
+	# PUBLIC because wx/app.h is included in CemuApp.h
+	target_link_libraries(CemuGui PUBLIC wx::base wx::core wx::gl wx::propgrid wx::xrc)
 endif()
diff --git a/src/imgui/CMakeLists.txt b/src/imgui/CMakeLists.txt
index 49e12de..d915204 100644
--- a/src/imgui/CMakeLists.txt
+++ b/src/imgui/CMakeLists.txt
@@ -1,21 +1,28 @@
 project(imguiImpl)
 
-include_directories(".")
-
 add_library(imguiImpl)
 
 set_property(TARGET imguiImpl PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
 
 target_sources(imguiImpl PRIVATE
-  imgui_impl_opengl3.cpp
-  imgui_impl_opengl3.h
-  imgui_impl_vulkan.cpp
-  imgui_impl_vulkan.h
-  imgui_extension.cpp
-  imgui_extension.h
+	imgui_impl_opengl3.cpp
+	imgui_impl_opengl3.h
+	imgui_impl_vulkan.cpp
+	imgui_impl_vulkan.h
+	imgui_extension.cpp
+	imgui_extension.h
 )
 
 target_precompile_headers(imguiImpl PRIVATE ../Common/precompiled.h)
 
-target_link_libraries(CemuCommon)
-target_include_directories(imguiImpl PRIVATE ../)
\ No newline at end of file
+target_include_directories(imguiImpl PUBLIC "../")
+
+target_link_libraries(imguiImpl PRIVATE
+	CemuCafe
+	CemuCommon
+	CemuGui
+	CemuInput
+	CemuResource
+	CemuUtil
+	imgui::imgui
+)
diff --git a/src/input/CMakeLists.txt b/src/input/CMakeLists.txt
index cbd86a3..c2650b3 100644
--- a/src/input/CMakeLists.txt
+++ b/src/input/CMakeLists.txt
@@ -1,7 +1,5 @@
 project(CemuInput)
 
-include_directories(".")
-
 add_library(CemuInput
 InputManager.cpp
 InputManager.h
@@ -95,4 +93,20 @@ endif()
 
 target_precompile_headers(CemuInput PRIVATE ../Common/precompiled.h)
 
-target_include_directories(CemuInput PRIVATE ../)
+target_include_directories(CemuInput PUBLIC "../")
+
+target_link_libraries(CemuInput PRIVATE
+	CemuCafe
+	CemuCommon
+	CemuConfig
+	CemuGui
+	CemuUtil
+	Boost::headers
+	Boost::program_options
+	glm::glm
+	SDL2::SDL2
+)
+
+if (ENABLE_WXWIDGETS)
+	target_link_libraries(CemuInput PRIVATE wx::base wx::core)
+endif()
diff --git a/src/resource/CMakeLists.txt b/src/resource/CMakeLists.txt
index 85084bc..ec44506 100644
--- a/src/resource/CMakeLists.txt
+++ b/src/resource/CMakeLists.txt
@@ -16,4 +16,6 @@ target_sources(CemuResource PRIVATE
         CafeDefaultFont.cpp
         )
 
-target_include_directories(CemuResource PRIVATE ../)
+target_include_directories(CemuResource PUBLIC "../")
+
+target_link_libraries(CemuResource PRIVATE CemuComponents)
diff --git a/src/util/CMakeLists.txt b/src/util/CMakeLists.txt
index d31541f..d04f3e5 100644
--- a/src/util/CMakeLists.txt
+++ b/src/util/CMakeLists.txt
@@ -1,7 +1,5 @@
 project(CemuUtil)
 
-include_directories(".")
-
 file(GLOB_RECURSE CPP_FILES *.cpp)
 file(GLOB_RECURSE H_FILES *.h)
 
@@ -11,5 +9,15 @@ set_property(TARGET CemuUtil PROPERTY MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CON
 
 target_precompile_headers(CemuUtil PRIVATE ../Common/precompiled.h)
 
-target_link_libraries(CemuUtil CemuCommon CemuConfig)
-target_include_directories(CemuUtil PRIVATE ../)
\ No newline at end of file
+target_include_directories(CemuUtil PUBLIC "../")
+
+target_link_libraries(CemuUtil PRIVATE
+	CemuCommon
+	CemuConfig
+	Boost::headers
+	Boost::nowide
+)
+
+if (ENABLE_WXWIDGETS)
+	target_link_libraries(CemuUtil PRIVATE wx::base wx::core)
+endif()
