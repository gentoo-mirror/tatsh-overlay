From 96b19f60148c1d027e9b20ec14e10169f6c430cc Mon Sep 17 00:00:00 2001
From: Alexandre Bouvier <contact@amb.tf>
Date: Fri, 20 Aug 2021 06:07:12 +0200
Subject: [PATCH 1/4] cmake: Allow unbundling some external libraries

Add support for linking against the following system libraries:

* cubeb
* inih
* xbyak
* dynarmic
* httplib
---
 CMakeLists.txt                | 63 +++++++++++++++++++++++++++++++++++
 externals/CMakeLists.txt      | 12 ++++---
 externals/inih/CMakeLists.txt |  2 +-
 src/yuzu_cmd/config.cpp       |  2 +-
 4 files changed, 72 insertions(+), 7 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 957df54f54d8..b1b36f9f3881 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -28,6 +28,16 @@ option(YUZU_USE_BUNDLED_LIBUSB "Compile bundled libusb" OFF)
 
 option(YUZU_USE_BUNDLED_FFMPEG "Download/Build bundled FFmpeg" "${WIN32}")
 
+option(YUZU_USE_BUNDLED_XBYAK "Compile bundled xbyak" ON)
+
+option(YUZU_USE_BUNDLED_INIH "Compile bundled inih" ON)
+
+option(YUZU_USE_BUNDLED_CUBEB "Compile bundled cubeb" ON)
+
+option(YUZU_USE_BUNDLED_DYNARMIC "Compile bundled dynarmic" ON)
+
+option(YUZU_USE_BUNDLED_HTTPLIB "Compile bundled httplib" ON)
+
 option(YUZU_USE_QT_WEB_ENGINE "Use QtWebEngine for web applet implementation" OFF)
 
 option(ENABLE_CUBEB "Enables the cubeb audio backend" ON)
@@ -437,6 +447,59 @@ endif()
 set(THREADS_PREFER_PTHREAD_FLAG ON)
 find_package(Threads REQUIRED)
 
+if ((ARCHITECTURE_x86 OR ARCHITECTURE_x86_64) AND NOT YUZU_USE_BUNDLED_XBYAK)
+    find_package(xbyak)
+    if (xbyak_FOUND)
+        add_library(xbyak ALIAS xbyak::xbyak)
+    else()
+        message(STATUS "xbyak not found, falling back to externals")
+        set(YUZU_USE_BUNDLED_XBYAK ON)
+    endif()
+endif()
+
+if (NOT YUZU_USE_BUNDLED_INIH)
+    find_package(PkgConfig QUIET)
+    if (PKG_CONFIG_FOUND)
+        pkg_check_modules(inih IMPORTED_TARGET INIReader)
+    endif()
+    if (inih_FOUND)
+        add_library(inih ALIAS PkgConfig::inih)
+    else()
+        message(STATUS "inih not found, falling back to externals")
+        set(YUZU_USE_BUNDLED_INIH ON)
+    endif()
+endif()
+
+if (ENABLE_CUBEB AND NOT YUZU_USE_BUNDLED_CUBEB)
+    find_package(cubeb)
+    if (cubeb_FOUND)
+        add_library(cubeb ALIAS cubeb::cubeb)
+    else()
+        message(STATUS "cubeb not found, falling back to externals")
+        set(YUZU_USE_BUNDLED_CUBEB ON)
+    endif()
+endif()
+
+if (ARCHITECTURE_x86_64 AND NOT YUZU_USE_BUNDLED_DYNARMIC)
+    find_package(dynarmic)
+    if (dynarmic_FOUND)
+        add_library(dynarmic ALIAS dynarmic::dynarmic)
+    else()
+        message(STATUS "dynarmic not found, falling back to externals")
+        set(YUZU_USE_BUNDLED_DYNARMIC ON)
+    endif()
+endif()
+
+if (ENABLE_WEB_SERVICE AND NOT YUZU_USE_BUNDLED_HTTPLIB)
+    find_package(httplib)
+    if (httplib_FOUND)
+        add_library(httplib ALIAS httplib::httplib)
+    else()
+        message(STATUS "httplib not found, falling back to externals")
+        set(YUZU_USE_BUNDLED_HTTPLIB ON)
+    endif()
+endif()
+
 # Platform-specific library requirements
 # ======================================
 
diff --git a/externals/CMakeLists.txt b/externals/CMakeLists.txt
index e80fd124eb3e..41edea0fe67a 100644
--- a/externals/CMakeLists.txt
+++ b/externals/CMakeLists.txt
@@ -6,7 +6,7 @@ list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/externals/find-modules")
 include(DownloadExternals)
 
 # xbyak
-if (ARCHITECTURE_x86 OR ARCHITECTURE_x86_64)
+if ((ARCHITECTURE_x86 OR ARCHITECTURE_x86_64) AND NOT TARGET xbyak)
     add_library(xbyak INTERFACE)
     file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/xbyak/include)
     file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/xbyak/xbyak DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/xbyak/include)
@@ -15,7 +15,7 @@ if (ARCHITECTURE_x86 OR ARCHITECTURE_x86_64)
 endif()
 
 # Dynarmic
-if (ARCHITECTURE_x86_64)
+if (ARCHITECTURE_x86_64 AND NOT TARGET dynarmic)
     set(DYNARMIC_NO_BUNDLED_FMT ON)
     set(DYNARMIC_IGNORE_ASSERTS ON CACHE BOOL "" FORCE)
     add_subdirectory(dynarmic)
@@ -30,7 +30,9 @@ endif()
 add_subdirectory(glad)
 
 # inih
-add_subdirectory(inih)
+if (NOT TARGET inih)
+    add_subdirectory(inih)
+endif()
 
 # mbedtls
 add_subdirectory(mbedtls EXCLUDE_FROM_ALL)
@@ -78,7 +80,7 @@ add_subdirectory(enet)
 target_include_directories(enet INTERFACE ./enet/include)
 
 # Cubeb
-if(ENABLE_CUBEB)
+if (ENABLE_CUBEB AND NOT TARGET cubeb)
     set(BUILD_TESTS OFF CACHE BOOL "")
     add_subdirectory(cubeb EXCLUDE_FROM_ALL)
 endif()
@@ -92,7 +94,7 @@ endif()
 # Sirit
 add_subdirectory(sirit)
 
-if (ENABLE_WEB_SERVICE)
+if (ENABLE_WEB_SERVICE AND NOT TARGET httplib)
     find_package(OpenSSL 1.1)
     if (OPENSSL_FOUND)
         set(OPENSSL_LIBRARIES OpenSSL::SSL OpenSSL::Crypto)
diff --git a/externals/inih/CMakeLists.txt b/externals/inih/CMakeLists.txt
index b686e3cf5808..827ac3bbcf31 100644
--- a/externals/inih/CMakeLists.txt
+++ b/externals/inih/CMakeLists.txt
@@ -9,4 +9,4 @@ add_library(inih
 )
 
 create_target_directory_groups(inih)
-target_include_directories(inih INTERFACE .)
+target_include_directories(inih INTERFACE inih/cpp)
diff --git a/src/yuzu_cmd/config.cpp b/src/yuzu_cmd/config.cpp
index 66dd0dc154d4..3ced6d782d31 100644
--- a/src/yuzu_cmd/config.cpp
+++ b/src/yuzu_cmd/config.cpp
@@ -15,7 +15,7 @@
 #pragma clang diagnostic pop
 #endif
 
-#include <inih/cpp/INIReader.h>
+#include <INIReader.h>
 #include "common/fs/file.h"
 #include "common/fs/fs.h"
 #include "common/fs/path_util.h"

From 2b0571628bff6be458a50d5e5ad57f361fdd54e6 Mon Sep 17 00:00:00 2001
From: Andrea Pappacoda <andrea@pappacoda.it>
Date: Fri, 25 Mar 2022 23:22:58 +0100
Subject: [PATCH 2/4] build: also look for cpp-httplib via pkg-config

---
 CMakeLists.txt                           |  6 ++----
 externals/CMakeLists.txt                 |  4 ++--
 externals/find-modules/Findhttplib.cmake | 22 ++++++++++++++++++++++
 src/web_service/CMakeLists.txt           |  2 +-
 4 files changed, 27 insertions(+), 7 deletions(-)
 create mode 100644 externals/find-modules/Findhttplib.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index b1b36f9f3881..66ad8f7688c2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -491,10 +491,8 @@ if (ARCHITECTURE_x86_64 AND NOT YUZU_USE_BUNDLED_DYNARMIC)
 endif()
 
 if (ENABLE_WEB_SERVICE AND NOT YUZU_USE_BUNDLED_HTTPLIB)
-    find_package(httplib)
-    if (httplib_FOUND)
-        add_library(httplib ALIAS httplib::httplib)
-    else()
+    find_package(httplib MODULE)
+    if (NOT httplib_FOUND)
         message(STATUS "httplib not found, falling back to externals")
         set(YUZU_USE_BUNDLED_HTTPLIB ON)
     endif()
diff --git a/externals/CMakeLists.txt b/externals/CMakeLists.txt
index 41edea0fe67a..a0ac12d54e63 100644
--- a/externals/CMakeLists.txt
+++ b/externals/CMakeLists.txt
@@ -94,7 +94,7 @@ endif()
 # Sirit
 add_subdirectory(sirit)
 
-if (ENABLE_WEB_SERVICE AND NOT TARGET httplib)
+if (ENABLE_WEB_SERVICE AND NOT TARGET httplib::httplib)
     find_package(OpenSSL 1.1)
     if (OPENSSL_FOUND)
         set(OPENSSL_LIBRARIES OpenSSL::SSL OpenSSL::Crypto)
@@ -118,7 +118,7 @@ if (ENABLE_WEB_SERVICE AND NOT TARGET httplib)
     if (WIN32)
         target_link_libraries(httplib INTERFACE crypt32 cryptui ws2_32)
     endif()
-	
+
     # cpp-jwt
     add_library(cpp-jwt INTERFACE)
     target_include_directories(cpp-jwt INTERFACE ./cpp-jwt/include)
diff --git a/externals/find-modules/Findhttplib.cmake b/externals/find-modules/Findhttplib.cmake
new file mode 100644
index 000000000000..0c7374c21d15
--- /dev/null
+++ b/externals/find-modules/Findhttplib.cmake
@@ -0,0 +1,22 @@
+# SPDX-FileCopyrightText: 2022 Andrea Pappacoda <andrea@pappacoda.it>
+#
+# SPDX-License-Identifier: GPL-2.0-or-later
+
+find_package(httplib CONFIG)
+if (NOT httplib_FOUND)
+    find_package(PkgConfig QUIET)
+    if (PKG_CONFIG_FOUND)
+        pkg_search_module(cpp-httplib IMPORTED_TARGET cpp-httplib)
+        if (cpp-httplib_FOUND)
+            set(httplib_FOUND True)
+            set(HTTPLIB_VERSION "${cpp-httplib_VERSION}")
+            add_library(httplib::httplib ALIAS PkgConfig::cpp-httplib)
+        endif()
+    endif()
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(httplib
+    REQUIRED_VARS httplib_FOUND
+    VERSION_VAR HTTPLIB_VERSION
+)
diff --git a/src/web_service/CMakeLists.txt b/src/web_service/CMakeLists.txt
index 3f75d97d178f..cbd4a814e87a 100644
--- a/src/web_service/CMakeLists.txt
+++ b/src/web_service/CMakeLists.txt
@@ -16,4 +16,4 @@ add_library(web_service STATIC
 )
 
 create_target_directory_groups(web_service)
-target_link_libraries(web_service PRIVATE common network nlohmann_json::nlohmann_json httplib cpp-jwt)
+target_link_libraries(web_service PRIVATE common network nlohmann_json::nlohmann_json httplib::httplib cpp-jwt)

From 1443fe99f3a0c782e8b1ecd07b57f1a45b988733 Mon Sep 17 00:00:00 2001
From: Alexandre Bouvier <contact@amb.tf>
Date: Mon, 28 Mar 2022 01:16:58 +0200
Subject: [PATCH 3/4] cmake: Add option to unbundle every external

---
 CMakeLists.txt                                | 132 ++++++++----------
 externals/CMakeLists.txt                      |  42 ++++--
 externals/find-modules/FindDiscordRPC.cmake   |  27 ++++
 .../find-modules/FindVulkanHeaders.cmake      |  47 +++++++
 externals/find-modules/Findenet.cmake         |  18 +++
 externals/find-modules/Findhttplib.cmake      |  27 ++--
 externals/find-modules/Findinih.cmake         |  18 +++
 externals/find-modules/Findzstd.cmake         |  38 +++--
 externals/inih/CMakeLists.txt                 |   1 +
 src/audio_core/CMakeLists.txt                 |   4 +-
 src/common/CMakeLists.txt                     |  14 +-
 src/core/CMakeLists.txt                       |   4 +-
 src/dedicated_room/CMakeLists.txt             |   2 +-
 src/network/CMakeLists.txt                    |   2 +-
 src/video_core/CMakeLists.txt                 |   7 +-
 src/web_service/CMakeLists.txt                |   2 +-
 src/yuzu/CMakeLists.txt                       |   6 +-
 src/yuzu_cmd/CMakeLists.txt                   |   4 +-
 18 files changed, 256 insertions(+), 139 deletions(-)
 create mode 100644 externals/find-modules/FindDiscordRPC.cmake
 create mode 100644 externals/find-modules/FindVulkanHeaders.cmake
 create mode 100644 externals/find-modules/Findenet.cmake
 create mode 100644 externals/find-modules/Findinih.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 66ad8f7688c2..1af5eb717bba 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -28,16 +28,6 @@ option(YUZU_USE_BUNDLED_LIBUSB "Compile bundled libusb" OFF)
 
 option(YUZU_USE_BUNDLED_FFMPEG "Download/Build bundled FFmpeg" "${WIN32}")
 
-option(YUZU_USE_BUNDLED_XBYAK "Compile bundled xbyak" ON)
-
-option(YUZU_USE_BUNDLED_INIH "Compile bundled inih" ON)
-
-option(YUZU_USE_BUNDLED_CUBEB "Compile bundled cubeb" ON)
-
-option(YUZU_USE_BUNDLED_DYNARMIC "Compile bundled dynarmic" ON)
-
-option(YUZU_USE_BUNDLED_HTTPLIB "Compile bundled httplib" ON)
-
 option(YUZU_USE_QT_WEB_ENGINE "Use QtWebEngine for web applet implementation" OFF)
 
 option(ENABLE_CUBEB "Enables the cubeb audio backend" ON)
@@ -54,6 +44,24 @@ option(YUZU_USE_BUNDLED_VCPKG "Use vcpkg for yuzu dependencies" "${MSVC}")
 
 option(YUZU_CHECK_SUBMODULES "Check if submodules are present" ON)
 
+option(YUZU_USE_BUNDLED_CPP_JWT "Compile bundled cpp-jwt" ON)
+
+option(YUZU_USE_BUNDLED_CUBEB "Compile bundled cubeb" ON)
+
+option(YUZU_USE_BUNDLED_DISCORD_PRESENCE "Compile bundled discord-rpc" ON)
+
+option(YUZU_USE_BUNDLED_DYNARMIC "Compile bundled dynarmic" ON)
+
+option(YUZU_USE_BUNDLED_ENET "Compile bundled enet" ON)
+
+option(YUZU_USE_BUNDLED_HTTPLIB "Compile bundled cpp-httplib" ON)
+
+option(YUZU_USE_BUNDLED_INIH "Compile bundled inih" ON)
+
+option(YUZU_USE_BUNDLED_VULKAN_HEADERS "Compile bundled Vulkan-Headers" ON)
+
+option(YUZU_USE_BUNDLED_XBYAK "Compile bundled xbyak" ON)
+
 if (YUZU_USE_BUNDLED_VCPKG)
     if (YUZU_TESTS)
         list(APPEND VCPKG_MANIFEST_FEATURES "yuzu-tests")
@@ -185,24 +193,55 @@ set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
 # System imported libraries
 # =======================================================================
 
-find_package(fmt 8.0.1 REQUIRED CONFIG)
-find_package(nlohmann_json 3.8 REQUIRED CONFIG)
+find_package(fmt 9 REQUIRED)
+find_package(lz4 1.8 REQUIRED)
+find_package(nlohmann_json 3.8 REQUIRED)
 find_package(ZLIB 1.2 REQUIRED)
+find_package(zstd 1.5 REQUIRED)
+
+if (NOT YUZU_USE_BUNDLED_ENET)
+    find_package(enet 1.3.13 REQUIRED)
+endif()
+
+if (NOT YUZU_USE_BUNDLED_INIH)
+    find_package(inih REQUIRED)
+endif()
+
+if (NOT YUZU_USE_BUNDLED_OPUS)
+    find_package(Opus 1.3 REQUIRED)
+endif()
+
+if (NOT YUZU_USE_BUNDLED_VULKAN_HEADERS)
+    find_package(VulkanHeaders 1.3.213 REQUIRED)
+endif()
+
+if (NOT YUZU_USE_BUNDLED_XBYAK)
+    find_package(xbyak 6 REQUIRED)
+endif()
+
+if (ENABLE_WEB_SERVICE)
+    if (NOT YUZU_USE_BUNDLED_HTTPLIB)
+        find_package(httplib 0.10.8 REQUIRED)
+    endif()
+    if (NOT YUZU_USE_BUNDLED_CPP_JWT)
+        find_package(cpp-jwt 1.4 REQUIRED)
+    endif()
+endif()
+
+if (USE_DISCORD_PRESENCE AND NOT YUZU_USE_BUNDLED_DISCORD_PRESENCE)
+    find_package(DiscordRPC REQUIRED)
+endif()
 
-# Search for config-only package first (for vcpkg), then try non-config
-find_package(zstd 1.5 CONFIG)
-if (NOT zstd_FOUND)
-    find_package(zstd 1.5 REQUIRED)
+if (ENABLE_CUBEB AND NOT YUZU_USE_BUNDLED_CUBEB)
+    find_package(cubeb REQUIRED)
 endif()
 
-# lz4 1.8 is required, but vcpkg's lz4-config.cmake does not have version info
-find_package(lz4 CONFIG)
-if (NOT lz4_FOUND)
-    find_package(lz4 1.8 REQUIRED)
+if (ARCHITECTURE_x86_64 AND NOT YUZU_USE_BUNDLED_DYNARMIC)
+    find_package(dynarmic 6.2.3 REQUIRED)
 endif()
 
 if (YUZU_TESTS)
-    find_package(Catch2 2.13.7 REQUIRED CONFIG)
+    find_package(Catch2 2.13.7 REQUIRED)
 endif()
 
 find_package(Boost 1.73.0 COMPONENTS context)
@@ -447,57 +486,6 @@ endif()
 set(THREADS_PREFER_PTHREAD_FLAG ON)
 find_package(Threads REQUIRED)
 
-if ((ARCHITECTURE_x86 OR ARCHITECTURE_x86_64) AND NOT YUZU_USE_BUNDLED_XBYAK)
-    find_package(xbyak)
-    if (xbyak_FOUND)
-        add_library(xbyak ALIAS xbyak::xbyak)
-    else()
-        message(STATUS "xbyak not found, falling back to externals")
-        set(YUZU_USE_BUNDLED_XBYAK ON)
-    endif()
-endif()
-
-if (NOT YUZU_USE_BUNDLED_INIH)
-    find_package(PkgConfig QUIET)
-    if (PKG_CONFIG_FOUND)
-        pkg_check_modules(inih IMPORTED_TARGET INIReader)
-    endif()
-    if (inih_FOUND)
-        add_library(inih ALIAS PkgConfig::inih)
-    else()
-        message(STATUS "inih not found, falling back to externals")
-        set(YUZU_USE_BUNDLED_INIH ON)
-    endif()
-endif()
-
-if (ENABLE_CUBEB AND NOT YUZU_USE_BUNDLED_CUBEB)
-    find_package(cubeb)
-    if (cubeb_FOUND)
-        add_library(cubeb ALIAS cubeb::cubeb)
-    else()
-        message(STATUS "cubeb not found, falling back to externals")
-        set(YUZU_USE_BUNDLED_CUBEB ON)
-    endif()
-endif()
-
-if (ARCHITECTURE_x86_64 AND NOT YUZU_USE_BUNDLED_DYNARMIC)
-    find_package(dynarmic)
-    if (dynarmic_FOUND)
-        add_library(dynarmic ALIAS dynarmic::dynarmic)
-    else()
-        message(STATUS "dynarmic not found, falling back to externals")
-        set(YUZU_USE_BUNDLED_DYNARMIC ON)
-    endif()
-endif()
-
-if (ENABLE_WEB_SERVICE AND NOT YUZU_USE_BUNDLED_HTTPLIB)
-    find_package(httplib MODULE)
-    if (NOT httplib_FOUND)
-        message(STATUS "httplib not found, falling back to externals")
-        set(YUZU_USE_BUNDLED_HTTPLIB ON)
-    endif()
-endif()
-
 # Platform-specific library requirements
 # ======================================
 
diff --git a/externals/CMakeLists.txt b/externals/CMakeLists.txt
index a0ac12d54e63..a3479bb58c3b 100644
--- a/externals/CMakeLists.txt
+++ b/externals/CMakeLists.txt
@@ -6,19 +6,21 @@ list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/externals/find-modules")
 include(DownloadExternals)
 
 # xbyak
-if ((ARCHITECTURE_x86 OR ARCHITECTURE_x86_64) AND NOT TARGET xbyak)
+if ((ARCHITECTURE_x86 OR ARCHITECTURE_x86_64) AND NOT TARGET xbyak::xbyak)
     add_library(xbyak INTERFACE)
     file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/xbyak/include)
     file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/xbyak/xbyak DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/xbyak/include)
     target_include_directories(xbyak SYSTEM INTERFACE ${CMAKE_CURRENT_BINARY_DIR}/xbyak/include)
     target_compile_definitions(xbyak INTERFACE XBYAK_NO_OP_NAMES)
+    add_library(xbyak::xbyak ALIAS xbyak)
 endif()
 
 # Dynarmic
-if (ARCHITECTURE_x86_64 AND NOT TARGET dynarmic)
+if (ARCHITECTURE_x86_64 AND NOT TARGET dynarmic::dynarmic)
     set(DYNARMIC_NO_BUNDLED_FMT ON)
     set(DYNARMIC_IGNORE_ASSERTS ON CACHE BOOL "" FORCE)
     add_subdirectory(dynarmic)
+    add_library(dynarmic::dynarmic ALIAS dynarmic)
 endif()
 
 # getopt
@@ -30,13 +32,14 @@ endif()
 add_subdirectory(glad)
 
 # inih
-if (NOT TARGET inih)
+if (NOT TARGET inih::INIReader)
     add_subdirectory(inih)
 endif()
 
 # mbedtls
 add_subdirectory(mbedtls EXCLUDE_FROM_ALL)
-target_include_directories(mbedtls PUBLIC ./mbedtls/include)
+target_include_directories(mbedcrypto PUBLIC ./mbedtls/include)
+add_library(MbedTLS::mbedcrypto ALIAS mbedcrypto)
 
 # MicroProfile
 add_library(microprofile INTERFACE)
@@ -76,24 +79,30 @@ if (YUZU_USE_EXTERNAL_SDL2)
 endif()
 
 # ENet
-add_subdirectory(enet)
-target_include_directories(enet INTERFACE ./enet/include)
+if (NOT TARGET enet::enet)
+    add_subdirectory(enet)
+    target_include_directories(enet INTERFACE ./enet/include)
+    add_library(enet::enet ALIAS enet)
+endif()
 
 # Cubeb
-if (ENABLE_CUBEB AND NOT TARGET cubeb)
+if (ENABLE_CUBEB AND NOT TARGET cubeb::cubeb)
     set(BUILD_TESTS OFF CACHE BOOL "")
     add_subdirectory(cubeb EXCLUDE_FROM_ALL)
+    add_library(cubeb::cubeb ALIAS cubeb)
 endif()
 
 # DiscordRPC
-if (USE_DISCORD_PRESENCE)
+if (USE_DISCORD_PRESENCE AND NOT TARGET DiscordRPC::discord-rpc)
     add_subdirectory(discord-rpc EXCLUDE_FROM_ALL)
     target_include_directories(discord-rpc INTERFACE ./discord-rpc/include)
+    add_library(DiscordRPC::discord-rpc ALIAS discord-rpc)
 endif()
 
 # Sirit
-add_subdirectory(sirit)
+add_subdirectory(sirit EXCLUDE_FROM_ALL)
 
+# cpp-httplib
 if (ENABLE_WEB_SERVICE AND NOT TARGET httplib::httplib)
     find_package(OpenSSL 1.1)
     if (OPENSSL_FOUND)
@@ -118,18 +127,20 @@ if (ENABLE_WEB_SERVICE AND NOT TARGET httplib::httplib)
     if (WIN32)
         target_link_libraries(httplib INTERFACE crypt32 cryptui ws2_32)
     endif()
+    add_library(httplib::httplib ALIAS httplib)
+endif()
 
-    # cpp-jwt
+# cpp-jwt
+if (ENABLE_WEB_SERVICE AND NOT TARGET cpp-jwt::cpp-jwt)
     add_library(cpp-jwt INTERFACE)
     target_include_directories(cpp-jwt INTERFACE ./cpp-jwt/include)
     target_compile_definitions(cpp-jwt INTERFACE CPP_JWT_USE_VENDORED_NLOHMANN_JSON)
+    add_library(cpp-jwt::cpp-jwt ALIAS cpp-jwt)
 endif()
 
 # Opus
-if (YUZU_USE_BUNDLED_OPUS)
+if (NOT TARGET Opus::opus)
     add_subdirectory(opus EXCLUDE_FROM_ALL)
-else()
-    find_package(Opus 1.3 REQUIRED)
 endif()
 
 # FFMpeg
@@ -140,3 +151,8 @@ if (YUZU_USE_BUNDLED_FFMPEG)
     set(FFmpeg_LIBRARIES "${FFmpeg_LIBRARIES}" PARENT_SCOPE)
     set(FFmpeg_INCLUDE_DIR "${FFmpeg_INCLUDE_DIR}" PARENT_SCOPE)
 endif()
+
+# Vulkan-Headers
+if (NOT TARGET Vulkan::Headers)
+    add_subdirectory(Vulkan-Headers EXCLUDE_FROM_ALL)
+endif()
diff --git a/externals/find-modules/FindDiscordRPC.cmake b/externals/find-modules/FindDiscordRPC.cmake
new file mode 100644
index 000000000000..44ca9904f4ae
--- /dev/null
+++ b/externals/find-modules/FindDiscordRPC.cmake
@@ -0,0 +1,27 @@
+# SPDX-FileCopyrightText: 2022 Alexandre Bouvier <contact@amb.tf>
+#
+# SPDX-License-Identifier: GPL-3.0-or-later
+
+find_path(DiscordRPC_INCLUDE_DIR discord_rpc.h)
+
+find_library(DiscordRPC_LIBRARY discord-rpc)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(DiscordRPC
+    REQUIRED_VARS
+        DiscordRPC_LIBRARY
+        DiscordRPC_INCLUDE_DIR
+)
+
+if (DiscordRPC_FOUND AND NOT TARGET DiscordRPC::discord-rpc)
+    add_library(DiscordRPC::discord-rpc UNKNOWN IMPORTED)
+    set_target_properties(DiscordRPC::discord-rpc PROPERTIES
+        IMPORTED_LOCATION "${DiscordRPC_LIBRARY}"
+        INTERFACE_INCLUDE_DIRECTORIES "${DiscordRPC_INCLUDE_DIR}"
+    )
+endif()
+
+mark_as_advanced(
+    DiscordRPC_INCLUDE_DIR
+    DiscordRPC_LIBRARY
+)
diff --git a/externals/find-modules/FindVulkanHeaders.cmake b/externals/find-modules/FindVulkanHeaders.cmake
new file mode 100644
index 000000000000..4a36972f629f
--- /dev/null
+++ b/externals/find-modules/FindVulkanHeaders.cmake
@@ -0,0 +1,47 @@
+# SPDX-FileCopyrightText: 2022 Alexandre Bouvier <contact@amb.tf>
+#
+# SPDX-License-Identifier: GPL-3.0-or-later
+
+find_package(PkgConfig QUIET)
+if (PKG_CONFIG_FOUND)
+    pkg_search_module(VULKANHEADERS QUIET vulkanheaders vulkan-headers)
+endif()
+
+find_path(VulkanHeaders_INCLUDE_DIR
+    NAMES vulkan.h
+    HINTS ${VULKANHEADERS_INCLUDE_DIRS}
+    PATH_SUFFIXES vulkan
+)
+
+if (VulkanHeaders_INCLUDE_DIR)
+    file(READ "${VulkanHeaders_INCLUDE_DIR}/vulkan_core.h" _vulkan_core_file)
+    string(REGEX MATCH "#define[ \t]+VK_HEADER_VERSION_COMPLETE[ \t]+VK_MAKE_API_VERSION\\(([0-9]+),[ \t]*([0-9]+),[ \t]*([0-9]+),[ \t]*VK_HEADER_VERSION\\)" _dummy_var "${_vulkan_core_file}")
+    if (CMAKE_MATCH_COUNT EQUAL 3)
+        set(VulkanHeaders_VERSION_TWEAK ${CMAKE_MATCH_1})
+        set(VulkanHeaders_VERSION_MAJOR ${CMAKE_MATCH_2})
+        set(VulkanHeaders_VERSION_MINOR ${CMAKE_MATCH_3})
+        string(REGEX MATCH "#define[ \t]+VK_HEADER_VERSION[ \t]+([0-9]+)" _dummy_var "${_vulkan_core_file}")
+        if (CMAKE_MATCH_COUNT EQUAL 1)
+            set(VulkanHeaders_VERSION_PATCH ${CMAKE_MATCH_1})
+            set(VulkanHeaders_VERSION "${VulkanHeaders_VERSION_MAJOR}.${VulkanHeaders_VERSION_MINOR}.${VulkanHeaders_VERSION_PATCH}.${VulkanHeaders_VERSION_TWEAK}")
+        endif()
+    endif()
+    unset(_vulkan_core_file)
+    unset(_dummy_var)
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(VulkanHeaders
+    REQUIRED_VARS VulkanHeaders_INCLUDE_DIR
+    VERSION_VAR VulkanHeaders_VERSION
+)
+
+if (VulkanHeaders_FOUND AND NOT TARGET Vulkan::Headers)
+    add_library(Vulkan::Headers INTERFACE IMPORTED)
+    set_target_properties(Vulkan::Headers PROPERTIES
+        INTERFACE_COMPILE_OPTIONS "${VULKANHEADERS_CFLAGS_OTHER}"
+        INTERFACE_INCLUDE_DIRECTORIES "${VulkanHeaders_INCLUDE_DIR}"
+    )
+endif()
+
+mark_as_advanced(VulkanHeaders_INCLUDE_DIR)
diff --git a/externals/find-modules/Findenet.cmake b/externals/find-modules/Findenet.cmake
new file mode 100644
index 000000000000..4cf49d4c7838
--- /dev/null
+++ b/externals/find-modules/Findenet.cmake
@@ -0,0 +1,18 @@
+# SPDX-FileCopyrightText: 2022 Alexandre Bouvier <contact@amb.tf>
+#
+# SPDX-License-Identifier: GPL-3.0-or-later
+
+find_package(PkgConfig QUIET)
+if (PKG_CONFIG_FOUND)
+    pkg_search_module(ENET QUIET IMPORTED_TARGET GLOBAL libenet)
+    if (ENET_FOUND)
+        add_library(enet::enet ALIAS PkgConfig::ENET)
+        set(enet_VERSION ${ENET_VERSION})
+    endif()
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(enet
+    REQUIRED_VARS ENET_LINK_LIBRARIES
+    VERSION_VAR enet_VERSION
+)
diff --git a/externals/find-modules/Findhttplib.cmake b/externals/find-modules/Findhttplib.cmake
index 0c7374c21d15..3c3fc7da8835 100644
--- a/externals/find-modules/Findhttplib.cmake
+++ b/externals/find-modules/Findhttplib.cmake
@@ -2,21 +2,22 @@
 #
 # SPDX-License-Identifier: GPL-2.0-or-later
 
-find_package(httplib CONFIG)
-if (NOT httplib_FOUND)
+include(FindPackageHandleStandardArgs)
+
+find_package(httplib QUIET CONFIG)
+if (httplib_FOUND)
+    find_package_handle_standard_args(httplib CONFIG_MODE)
+else()
     find_package(PkgConfig QUIET)
     if (PKG_CONFIG_FOUND)
-        pkg_search_module(cpp-httplib IMPORTED_TARGET cpp-httplib)
-        if (cpp-httplib_FOUND)
-            set(httplib_FOUND True)
-            set(HTTPLIB_VERSION "${cpp-httplib_VERSION}")
-            add_library(httplib::httplib ALIAS PkgConfig::cpp-httplib)
+        pkg_search_module(HTTPLIB QUIET IMPORTED_TARGET GLOBAL cpp-httplib)
+        if (HTTPLIB_FOUND)
+            add_library(httplib::httplib ALIAS PkgConfig::HTTPLIB)
+            set(httplib_VERSION ${HTTPLIB_VERSION})
         endif()
     endif()
+    find_package_handle_standard_args(httplib
+        REQUIRED_VARS HTTPLIB_INCLUDEDIR
+        VERSION_VAR httplib_VERSION
+    )
 endif()
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(httplib
-    REQUIRED_VARS httplib_FOUND
-    VERSION_VAR HTTPLIB_VERSION
-)
diff --git a/externals/find-modules/Findinih.cmake b/externals/find-modules/Findinih.cmake
new file mode 100644
index 000000000000..d2b6644ac233
--- /dev/null
+++ b/externals/find-modules/Findinih.cmake
@@ -0,0 +1,18 @@
+# SPDX-FileCopyrightText: 2022 Alexandre Bouvier <contact@amb.tf>
+#
+# SPDX-License-Identifier: GPL-3.0-or-later
+
+find_package(PkgConfig QUIET)
+if (PKG_CONFIG_FOUND)
+    pkg_search_module(INIREADER QUIET IMPORTED_TARGET GLOBAL INIReader)
+    if (INIREADER_FOUND)
+        add_library(inih::INIReader ALIAS PkgConfig::INIREADER)
+        set(inih_VERSION ${INIREADER_VERSION})
+    endif()
+endif()
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(inih
+    REQUIRED_VARS INIREADER_LINK_LIBRARIES
+    VERSION_VAR inih_VERSION
+)
diff --git a/externals/find-modules/Findzstd.cmake b/externals/find-modules/Findzstd.cmake
index f4031eb70125..62c93b73497a 100644
--- a/externals/find-modules/Findzstd.cmake
+++ b/externals/find-modules/Findzstd.cmake
@@ -1,19 +1,31 @@
 # SPDX-FileCopyrightText: 2022 yuzu Emulator Project
 # SPDX-License-Identifier: GPL-2.0-or-later
 
-find_package(PkgConfig)
+include(FindPackageHandleStandardArgs)
 
-if (PKG_CONFIG_FOUND)
-    pkg_search_module(libzstd IMPORTED_TARGET GLOBAL libzstd)
-    if (libzstd_FOUND)
-        add_library(zstd::zstd ALIAS PkgConfig::libzstd)
+find_package(zstd QUIET CONFIG)
+if (zstd_FOUND)
+    find_package_handle_standard_args(zstd CONFIG_MODE)
+    if (NOT TARGET zstd::zstd)
+        if (TARGET zstd::libzstd_shared)
+            set_target_properties(zstd::libzstd_shared PROPERTIES IMPORTED_GLOBAL TRUE)
+            add_library(zstd::zstd ALIAS zstd::libzstd_shared)
+        else()
+            set_target_properties(zstd::libzstd_static PROPERTIES IMPORTED_GLOBAL TRUE)
+            add_library(zstd::zstd ALIAS zstd::libzstd_static)
+        endif()
+    endif()
+else()
+    find_package(PkgConfig QUIET)
+    if (PKG_CONFIG_FOUND)
+        pkg_search_module(ZSTD QUIET IMPORTED_TARGET GLOBAL libzstd)
+        if (ZSTD_FOUND)
+            add_library(zstd::zstd ALIAS PkgConfig::ZSTD)
+            set(zstd_VERSION ${ZSTD_VERSION})
+        endif()
     endif()
+    find_package_handle_standard_args(zstd
+        REQUIRED_VARS ZSTD_LINK_LIBRARIES
+        VERSION_VAR zstd_VERSION
+    )
 endif()
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(zstd
-    REQUIRED_VARS
-        libzstd_LINK_LIBRARIES
-        libzstd_FOUND
-    VERSION_VAR libzstd_VERSION
-)
diff --git a/externals/inih/CMakeLists.txt b/externals/inih/CMakeLists.txt
index 827ac3bbcf31..ebb60a976e47 100644
--- a/externals/inih/CMakeLists.txt
+++ b/externals/inih/CMakeLists.txt
@@ -10,3 +10,4 @@ add_library(inih
 
 create_target_directory_groups(inih)
 target_include_directories(inih INTERFACE inih/cpp)
+add_library(inih::INIReader ALIAS inih)
diff --git a/src/audio_core/CMakeLists.txt b/src/audio_core/CMakeLists.txt
index 144f1bab2987..183adfedb6e2 100644
--- a/src/audio_core/CMakeLists.txt
+++ b/src/audio_core/CMakeLists.txt
@@ -227,11 +227,11 @@ endif()
 
 target_link_libraries(audio_core PUBLIC common core)
 if (ARCHITECTURE_x86_64)
-    target_link_libraries(audio_core PRIVATE dynarmic)
+    target_link_libraries(audio_core PRIVATE dynarmic::dynarmic)
 endif()
 
 if(ENABLE_CUBEB)
-    target_link_libraries(audio_core PRIVATE cubeb)
+    target_link_libraries(audio_core PRIVATE cubeb::cubeb)
     target_compile_definitions(audio_core PRIVATE -DHAVE_CUBEB=1)
 endif()
 if(ENABLE_SDL2)
diff --git a/src/common/CMakeLists.txt b/src/common/CMakeLists.txt
index 46cf75fdebd6..1c0f7e273505 100644
--- a/src/common/CMakeLists.txt
+++ b/src/common/CMakeLists.txt
@@ -145,7 +145,7 @@ if(ARCHITECTURE_x86_64)
             x64/xbyak_abi.h
             x64/xbyak_util.h
     )
-    target_link_libraries(common PRIVATE xbyak)
+    target_link_libraries(common PRIVATE xbyak::xbyak)
 endif()
 
 if (MSVC)
@@ -169,14 +169,4 @@ endif()
 create_target_directory_groups(common)
 
 target_link_libraries(common PUBLIC ${Boost_LIBRARIES} fmt::fmt microprofile Threads::Threads)
-if (TARGET lz4::lz4)
-  target_link_libraries(common PRIVATE lz4::lz4)
-else()
-  target_link_libraries(common PRIVATE LZ4::lz4_shared)
-endif()
-if (TARGET zstd::zstd)
-  target_link_libraries(common PRIVATE zstd::zstd)
-else()
-  target_link_libraries(common PRIVATE
-    $<IF:$<TARGET_EXISTS:zstd::libzstd_shared>,zstd::libzstd_shared,zstd::libzstd_static>)
-endif()
+target_link_libraries(common PRIVATE lz4::lz4 zstd::zstd)
diff --git a/src/core/CMakeLists.txt b/src/core/CMakeLists.txt
index abeb5859b524..d415846a9960 100644
--- a/src/core/CMakeLists.txt
+++ b/src/core/CMakeLists.txt
@@ -788,7 +788,7 @@ endif()
 create_target_directory_groups(core)
 
 target_link_libraries(core PUBLIC common PRIVATE audio_core network video_core)
-target_link_libraries(core PUBLIC Boost::boost PRIVATE fmt::fmt nlohmann_json::nlohmann_json mbedtls Opus::opus)
+target_link_libraries(core PUBLIC Boost::boost PRIVATE fmt::fmt nlohmann_json::nlohmann_json MbedTLS::mbedcrypto Opus::opus)
 if (MINGW)
     target_link_libraries(core PRIVATE ${MSWSOCK_LIBRARY})
 endif()
@@ -807,5 +807,5 @@ if (ARCHITECTURE_x86_64)
         arm/dynarmic/arm_dynarmic_cp15.cpp
         arm/dynarmic/arm_dynarmic_cp15.h
     )
-    target_link_libraries(core PRIVATE dynarmic)
+    target_link_libraries(core PRIVATE dynarmic::dynarmic)
 endif()
diff --git a/src/dedicated_room/CMakeLists.txt b/src/dedicated_room/CMakeLists.txt
index 2d9731f193b3..24a1a2f0d628 100644
--- a/src/dedicated_room/CMakeLists.txt
+++ b/src/dedicated_room/CMakeLists.txt
@@ -16,7 +16,7 @@ if (ENABLE_WEB_SERVICE)
     target_link_libraries(yuzu-room PRIVATE web_service)
 endif()
 
-target_link_libraries(yuzu-room PRIVATE mbedtls mbedcrypto)
+target_link_libraries(yuzu-room PRIVATE MbedTLS::mbedcrypto)
 if (MSVC)
     target_link_libraries(yuzu-room PRIVATE getopt)
 endif()
diff --git a/src/network/CMakeLists.txt b/src/network/CMakeLists.txt
index 6f8ca4b90cfb..9a940e1f512f 100644
--- a/src/network/CMakeLists.txt
+++ b/src/network/CMakeLists.txt
@@ -18,7 +18,7 @@ add_library(network STATIC
 
 create_target_directory_groups(network)
 
-target_link_libraries(network PRIVATE common enet Boost::boost)
+target_link_libraries(network PRIVATE common enet::enet Boost::boost)
 if (ENABLE_WEB_SERVICE)
     target_compile_definitions(network PRIVATE -DENABLE_WEB_SERVICE)
     target_link_libraries(network PRIVATE web_service)
diff --git a/src/video_core/CMakeLists.txt b/src/video_core/CMakeLists.txt
index 40e6d1ec4858..4fa64d3cb330 100644
--- a/src/video_core/CMakeLists.txt
+++ b/src/video_core/CMakeLists.txt
@@ -244,7 +244,7 @@ add_library(video_core STATIC
 create_target_directory_groups(video_core)
 
 target_link_libraries(video_core PUBLIC common core)
-target_link_libraries(video_core PUBLIC glad shader_recompiler xbyak)
+target_link_libraries(video_core PUBLIC glad shader_recompiler xbyak::xbyak)
 
 if (YUZU_USE_BUNDLED_FFMPEG AND NOT WIN32)
     add_dependencies(video_core ffmpeg-build)
@@ -256,8 +256,7 @@ target_link_options(video_core PRIVATE ${FFmpeg_LDFLAGS})
 
 add_dependencies(video_core host_shaders)
 target_include_directories(video_core PRIVATE ${HOST_SHADERS_INCLUDE})
-target_include_directories(video_core PRIVATE sirit ../../externals/Vulkan-Headers/include)
-target_link_libraries(video_core PRIVATE sirit)
+target_link_libraries(video_core PRIVATE sirit Vulkan::Headers)
 
 if (ENABLE_NSIGHT_AFTERMATH)
     if (NOT DEFINED ENV{NSIGHT_AFTERMATH_SDK})
@@ -290,5 +289,5 @@ else()
 endif()
 
 if (ARCHITECTURE_x86_64)
-    target_link_libraries(video_core PRIVATE dynarmic)
+    target_link_libraries(video_core PRIVATE dynarmic::dynarmic)
 endif()
diff --git a/src/web_service/CMakeLists.txt b/src/web_service/CMakeLists.txt
index cbd4a814e87a..b548fada6238 100644
--- a/src/web_service/CMakeLists.txt
+++ b/src/web_service/CMakeLists.txt
@@ -16,4 +16,4 @@ add_library(web_service STATIC
 )
 
 create_target_directory_groups(web_service)
-target_link_libraries(web_service PRIVATE common network nlohmann_json::nlohmann_json httplib::httplib cpp-jwt)
+target_link_libraries(web_service PRIVATE common network nlohmann_json::nlohmann_json httplib::httplib cpp-jwt::cpp-jwt)
diff --git a/src/yuzu/CMakeLists.txt b/src/yuzu/CMakeLists.txt
index 29d506c47281..3ba115a174c3 100644
--- a/src/yuzu/CMakeLists.txt
+++ b/src/yuzu/CMakeLists.txt
@@ -311,7 +311,7 @@ target_link_libraries(yuzu PRIVATE common core input_common network video_core)
 target_link_libraries(yuzu PRIVATE Boost::boost glad Qt::Widgets Qt::Multimedia)
 target_link_libraries(yuzu PRIVATE ${PLATFORM_LIBRARIES} Threads::Threads)
 
-target_include_directories(yuzu PRIVATE ../../externals/Vulkan-Headers/include)
+target_link_libraries(yuzu PRIVATE Vulkan::Headers)
 if (NOT WIN32)
     target_include_directories(yuzu PRIVATE ${Qt5Gui_PRIVATE_INCLUDE_DIRS})
 endif()
@@ -347,7 +347,7 @@ if (USE_DISCORD_PRESENCE)
         discord_impl.cpp
         discord_impl.h
     )
-    target_link_libraries(yuzu PRIVATE discord-rpc)
+    target_link_libraries(yuzu PRIVATE DiscordRPC::discord-rpc)
     target_compile_definitions(yuzu PRIVATE -DUSE_DISCORD_PRESENCE)
 endif()
 
@@ -386,5 +386,5 @@ if (NOT APPLE)
 endif()
 
 if (ARCHITECTURE_x86_64)
-    target_link_libraries(yuzu PRIVATE dynarmic)
+    target_link_libraries(yuzu PRIVATE dynarmic::dynarmic)
 endif()
diff --git a/src/yuzu_cmd/CMakeLists.txt b/src/yuzu_cmd/CMakeLists.txt
index 7d8ca3d8a0b3..a967359f8b1c 100644
--- a/src/yuzu_cmd/CMakeLists.txt
+++ b/src/yuzu_cmd/CMakeLists.txt
@@ -31,7 +31,7 @@ add_executable(yuzu-cmd
 create_target_directory_groups(yuzu-cmd)
 
 target_link_libraries(yuzu-cmd PRIVATE common core input_common)
-target_link_libraries(yuzu-cmd PRIVATE inih glad)
+target_link_libraries(yuzu-cmd PRIVATE inih::INIReader glad)
 if (MSVC)
     target_link_libraries(yuzu-cmd PRIVATE getopt)
 endif()
@@ -40,7 +40,7 @@ target_link_libraries(yuzu-cmd PRIVATE ${PLATFORM_LIBRARIES} SDL2 Threads::Threa
 create_resource("../../dist/yuzu.bmp" "yuzu_cmd/yuzu_icon.h" "yuzu_icon")
 target_include_directories(yuzu-cmd PRIVATE ${RESOURCES_DIR})
 
-target_include_directories(yuzu-cmd PRIVATE ../../externals/Vulkan-Headers/include)
+target_link_libraries(yuzu-cmd PRIVATE Vulkan::Headers)
 
 if (YUZU_USE_EXTERNAL_SDL2)
     target_compile_definitions(yuzu-cmd PRIVATE -DYUZU_USE_EXTERNAL_SDL2)

From 29379c97b9010e6ca9eed001a5bad311eccdf370 Mon Sep 17 00:00:00 2001
From: Alexandre Bouvier <contact@amb.tf>
Date: Tue, 20 Sep 2022 21:46:46 +0200
Subject: [PATCH 4/4] cmake: Remove options and fix versions

---
 CMakeLists.txt                                | 64 ++++---------------
 externals/CMakeLists.txt                      |  7 +-
 .../find-modules/FindVulkanHeaders.cmake      | 47 --------------
 externals/find-modules/Findenet.cmake         |  3 +-
 externals/find-modules/Findhttplib.cmake      |  3 +-
 externals/find-modules/Findinih.cmake         |  3 +-
 externals/find-modules/Findlz4.cmake          | 37 +++++++----
 externals/find-modules/Findzstd.cmake         | 11 ++--
 src/core/CMakeLists.txt                       |  2 +-
 src/dedicated_room/CMakeLists.txt             |  2 +-
 10 files changed, 51 insertions(+), 128 deletions(-)
 delete mode 100644 externals/find-modules/FindVulkanHeaders.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1af5eb717bba..bc5d511641aa 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -34,8 +34,6 @@ option(ENABLE_CUBEB "Enables the cubeb audio backend" ON)
 
 option(USE_DISCORD_PRESENCE "Enables Discord Rich Presence" OFF)
 
-option(YUZU_USE_BUNDLED_OPUS "Compile bundled opus" ON)
-
 option(YUZU_TESTS "Compile tests" ON)
 
 CMAKE_DEPENDENT_OPTION(YUZU_CRASH_DUMPS "Compile Windows crash dump (Minidump) support" OFF "WIN32" OFF)
@@ -44,24 +42,6 @@ option(YUZU_USE_BUNDLED_VCPKG "Use vcpkg for yuzu dependencies" "${MSVC}")
 
 option(YUZU_CHECK_SUBMODULES "Check if submodules are present" ON)
 
-option(YUZU_USE_BUNDLED_CPP_JWT "Compile bundled cpp-jwt" ON)
-
-option(YUZU_USE_BUNDLED_CUBEB "Compile bundled cubeb" ON)
-
-option(YUZU_USE_BUNDLED_DISCORD_PRESENCE "Compile bundled discord-rpc" ON)
-
-option(YUZU_USE_BUNDLED_DYNARMIC "Compile bundled dynarmic" ON)
-
-option(YUZU_USE_BUNDLED_ENET "Compile bundled enet" ON)
-
-option(YUZU_USE_BUNDLED_HTTPLIB "Compile bundled cpp-httplib" ON)
-
-option(YUZU_USE_BUNDLED_INIH "Compile bundled inih" ON)
-
-option(YUZU_USE_BUNDLED_VULKAN_HEADERS "Compile bundled Vulkan-Headers" ON)
-
-option(YUZU_USE_BUNDLED_XBYAK "Compile bundled xbyak" ON)
-
 if (YUZU_USE_BUNDLED_VCPKG)
     if (YUZU_TESTS)
         list(APPEND VCPKG_MANIFEST_FEATURES "yuzu-tests")
@@ -193,51 +173,35 @@ set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
 # System imported libraries
 # =======================================================================
 
+find_package(enet 1.3)
 find_package(fmt 9 REQUIRED)
+find_package(inih)
 find_package(lz4 1.8 REQUIRED)
 find_package(nlohmann_json 3.8 REQUIRED)
+find_package(Opus 1.3)
+find_package(Vulkan 1.3.213)
 find_package(ZLIB 1.2 REQUIRED)
 find_package(zstd 1.5 REQUIRED)
 
-if (NOT YUZU_USE_BUNDLED_ENET)
-    find_package(enet 1.3.13 REQUIRED)
+if (ARCHITECTURE_x86 OR ARCHITECTURE_x86_64)
+    find_package(xbyak 6)
 endif()
 
-if (NOT YUZU_USE_BUNDLED_INIH)
-    find_package(inih REQUIRED)
+if (ARCHITECTURE_x86_64)
+    find_package(dynarmic 6.2.3)
 endif()
 
-if (NOT YUZU_USE_BUNDLED_OPUS)
-    find_package(Opus 1.3 REQUIRED)
+if (ENABLE_CUBEB)
+    find_package(cubeb)
 endif()
 
-if (NOT YUZU_USE_BUNDLED_VULKAN_HEADERS)
-    find_package(VulkanHeaders 1.3.213 REQUIRED)
-endif()
-
-if (NOT YUZU_USE_BUNDLED_XBYAK)
-    find_package(xbyak 6 REQUIRED)
+if (USE_DISCORD_PRESENCE)
+    find_package(DiscordRPC)
 endif()
 
 if (ENABLE_WEB_SERVICE)
-    if (NOT YUZU_USE_BUNDLED_HTTPLIB)
-        find_package(httplib 0.10.8 REQUIRED)
-    endif()
-    if (NOT YUZU_USE_BUNDLED_CPP_JWT)
-        find_package(cpp-jwt 1.4 REQUIRED)
-    endif()
-endif()
-
-if (USE_DISCORD_PRESENCE AND NOT YUZU_USE_BUNDLED_DISCORD_PRESENCE)
-    find_package(DiscordRPC REQUIRED)
-endif()
-
-if (ENABLE_CUBEB AND NOT YUZU_USE_BUNDLED_CUBEB)
-    find_package(cubeb REQUIRED)
-endif()
-
-if (ARCHITECTURE_x86_64 AND NOT YUZU_USE_BUNDLED_DYNARMIC)
-    find_package(dynarmic 6.2.3 REQUIRED)
+    find_package(cpp-jwt 1.4)
+    find_package(httplib 0.11)
 endif()
 
 if (YUZU_TESTS)
diff --git a/externals/CMakeLists.txt b/externals/CMakeLists.txt
index a3479bb58c3b..3bffacb8022e 100644
--- a/externals/CMakeLists.txt
+++ b/externals/CMakeLists.txt
@@ -19,7 +19,7 @@ endif()
 if (ARCHITECTURE_x86_64 AND NOT TARGET dynarmic::dynarmic)
     set(DYNARMIC_NO_BUNDLED_FMT ON)
     set(DYNARMIC_IGNORE_ASSERTS ON CACHE BOOL "" FORCE)
-    add_subdirectory(dynarmic)
+    add_subdirectory(dynarmic EXCLUDE_FROM_ALL)
     add_library(dynarmic::dynarmic ALIAS dynarmic)
 endif()
 
@@ -38,8 +38,7 @@ endif()
 
 # mbedtls
 add_subdirectory(mbedtls EXCLUDE_FROM_ALL)
-target_include_directories(mbedcrypto PUBLIC ./mbedtls/include)
-add_library(MbedTLS::mbedcrypto ALIAS mbedcrypto)
+target_include_directories(mbedtls PUBLIC ./mbedtls/include)
 
 # MicroProfile
 add_library(microprofile INTERFACE)
@@ -80,7 +79,7 @@ endif()
 
 # ENet
 if (NOT TARGET enet::enet)
-    add_subdirectory(enet)
+    add_subdirectory(enet EXCLUDE_FROM_ALL)
     target_include_directories(enet INTERFACE ./enet/include)
     add_library(enet::enet ALIAS enet)
 endif()
diff --git a/externals/find-modules/FindVulkanHeaders.cmake b/externals/find-modules/FindVulkanHeaders.cmake
deleted file mode 100644
index 4a36972f629f..000000000000
--- a/externals/find-modules/FindVulkanHeaders.cmake
+++ /dev/null
@@ -1,47 +0,0 @@
-# SPDX-FileCopyrightText: 2022 Alexandre Bouvier <contact@amb.tf>
-#
-# SPDX-License-Identifier: GPL-3.0-or-later
-
-find_package(PkgConfig QUIET)
-if (PKG_CONFIG_FOUND)
-    pkg_search_module(VULKANHEADERS QUIET vulkanheaders vulkan-headers)
-endif()
-
-find_path(VulkanHeaders_INCLUDE_DIR
-    NAMES vulkan.h
-    HINTS ${VULKANHEADERS_INCLUDE_DIRS}
-    PATH_SUFFIXES vulkan
-)
-
-if (VulkanHeaders_INCLUDE_DIR)
-    file(READ "${VulkanHeaders_INCLUDE_DIR}/vulkan_core.h" _vulkan_core_file)
-    string(REGEX MATCH "#define[ \t]+VK_HEADER_VERSION_COMPLETE[ \t]+VK_MAKE_API_VERSION\\(([0-9]+),[ \t]*([0-9]+),[ \t]*([0-9]+),[ \t]*VK_HEADER_VERSION\\)" _dummy_var "${_vulkan_core_file}")
-    if (CMAKE_MATCH_COUNT EQUAL 3)
-        set(VulkanHeaders_VERSION_TWEAK ${CMAKE_MATCH_1})
-        set(VulkanHeaders_VERSION_MAJOR ${CMAKE_MATCH_2})
-        set(VulkanHeaders_VERSION_MINOR ${CMAKE_MATCH_3})
-        string(REGEX MATCH "#define[ \t]+VK_HEADER_VERSION[ \t]+([0-9]+)" _dummy_var "${_vulkan_core_file}")
-        if (CMAKE_MATCH_COUNT EQUAL 1)
-            set(VulkanHeaders_VERSION_PATCH ${CMAKE_MATCH_1})
-            set(VulkanHeaders_VERSION "${VulkanHeaders_VERSION_MAJOR}.${VulkanHeaders_VERSION_MINOR}.${VulkanHeaders_VERSION_PATCH}.${VulkanHeaders_VERSION_TWEAK}")
-        endif()
-    endif()
-    unset(_vulkan_core_file)
-    unset(_dummy_var)
-endif()
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(VulkanHeaders
-    REQUIRED_VARS VulkanHeaders_INCLUDE_DIR
-    VERSION_VAR VulkanHeaders_VERSION
-)
-
-if (VulkanHeaders_FOUND AND NOT TARGET Vulkan::Headers)
-    add_library(Vulkan::Headers INTERFACE IMPORTED)
-    set_target_properties(Vulkan::Headers PROPERTIES
-        INTERFACE_COMPILE_OPTIONS "${VULKANHEADERS_CFLAGS_OTHER}"
-        INTERFACE_INCLUDE_DIRECTORIES "${VulkanHeaders_INCLUDE_DIR}"
-    )
-endif()
-
-mark_as_advanced(VulkanHeaders_INCLUDE_DIR)
diff --git a/externals/find-modules/Findenet.cmake b/externals/find-modules/Findenet.cmake
index 4cf49d4c7838..663a2592f30e 100644
--- a/externals/find-modules/Findenet.cmake
+++ b/externals/find-modules/Findenet.cmake
@@ -7,12 +7,11 @@ if (PKG_CONFIG_FOUND)
     pkg_search_module(ENET QUIET IMPORTED_TARGET GLOBAL libenet)
     if (ENET_FOUND)
         add_library(enet::enet ALIAS PkgConfig::ENET)
-        set(enet_VERSION ${ENET_VERSION})
     endif()
 endif()
 
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(enet
     REQUIRED_VARS ENET_LINK_LIBRARIES
-    VERSION_VAR enet_VERSION
+    VERSION_VAR ENET_VERSION
 )
diff --git a/externals/find-modules/Findhttplib.cmake b/externals/find-modules/Findhttplib.cmake
index 3c3fc7da8835..56e92a63735e 100644
--- a/externals/find-modules/Findhttplib.cmake
+++ b/externals/find-modules/Findhttplib.cmake
@@ -13,11 +13,10 @@ else()
         pkg_search_module(HTTPLIB QUIET IMPORTED_TARGET GLOBAL cpp-httplib)
         if (HTTPLIB_FOUND)
             add_library(httplib::httplib ALIAS PkgConfig::HTTPLIB)
-            set(httplib_VERSION ${HTTPLIB_VERSION})
         endif()
     endif()
     find_package_handle_standard_args(httplib
         REQUIRED_VARS HTTPLIB_INCLUDEDIR
-        VERSION_VAR httplib_VERSION
+        VERSION_VAR HTTPLIB_VERSION
     )
 endif()
diff --git a/externals/find-modules/Findinih.cmake b/externals/find-modules/Findinih.cmake
index d2b6644ac233..844396471f46 100644
--- a/externals/find-modules/Findinih.cmake
+++ b/externals/find-modules/Findinih.cmake
@@ -7,12 +7,11 @@ if (PKG_CONFIG_FOUND)
     pkg_search_module(INIREADER QUIET IMPORTED_TARGET GLOBAL INIReader)
     if (INIREADER_FOUND)
         add_library(inih::INIReader ALIAS PkgConfig::INIREADER)
-        set(inih_VERSION ${INIREADER_VERSION})
     endif()
 endif()
 
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(inih
     REQUIRED_VARS INIREADER_LINK_LIBRARIES
-    VERSION_VAR inih_VERSION
+    VERSION_VAR INIREADER_VERSION
 )
diff --git a/externals/find-modules/Findlz4.cmake b/externals/find-modules/Findlz4.cmake
index 13ca5de66d7b..a928c43077f7 100644
--- a/externals/find-modules/Findlz4.cmake
+++ b/externals/find-modules/Findlz4.cmake
@@ -1,19 +1,30 @@
 # SPDX-FileCopyrightText: 2022 yuzu Emulator Project
 # SPDX-License-Identifier: GPL-2.0-or-later
 
-find_package(PkgConfig)
+include(FindPackageHandleStandardArgs)
 
-if (PKG_CONFIG_FOUND)
-    pkg_search_module(liblz4 IMPORTED_TARGET GLOBAL liblz4)
-    if (liblz4_FOUND)
-        add_library(lz4::lz4 ALIAS PkgConfig::liblz4)
+find_package(lz4 QUIET CONFIG)
+if (lz4_FOUND)
+    find_package_handle_standard_args(lz4 CONFIG_MODE)
+    if (NOT TARGET lz4::lz4)
+        if (TARGET LZ4::lz4_shared)
+            set_target_properties(LZ4::lz4_shared PROPERTIES IMPORTED_GLOBAL TRUE)
+            add_library(lz4::lz4 ALIAS LZ4::lz4_shared)
+        else()
+            set_target_properties(LZ4::lz4_static PROPERTIES IMPORTED_GLOBAL TRUE)
+            add_library(lz4::lz4 ALIAS LZ4::lz4_static)
+        endif()
+    endif()
+else()
+    find_package(PkgConfig QUIET)
+    if (PKG_CONFIG_FOUND)
+        pkg_search_module(liblz4 QUIET IMPORTED_TARGET GLOBAL liblz4)
+        if (liblz4_FOUND)
+            add_library(lz4::lz4 ALIAS PkgConfig::liblz4)
+        endif()
     endif()
+    find_package_handle_standard_args(lz4
+        REQUIRED_VARS liblz4_LINK_LIBRARIES
+        VERSION_VAR liblz4_VERSION
+    )
 endif()
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(lz4
-    REQUIRED_VARS
-        liblz4_LINK_LIBRARIES
-        liblz4_FOUND
-    VERSION_VAR liblz4_VERSION
-)
diff --git a/externals/find-modules/Findzstd.cmake b/externals/find-modules/Findzstd.cmake
index 62c93b73497a..1c29f3598464 100644
--- a/externals/find-modules/Findzstd.cmake
+++ b/externals/find-modules/Findzstd.cmake
@@ -18,14 +18,13 @@ if (zstd_FOUND)
 else()
     find_package(PkgConfig QUIET)
     if (PKG_CONFIG_FOUND)
-        pkg_search_module(ZSTD QUIET IMPORTED_TARGET GLOBAL libzstd)
-        if (ZSTD_FOUND)
-            add_library(zstd::zstd ALIAS PkgConfig::ZSTD)
-            set(zstd_VERSION ${ZSTD_VERSION})
+        pkg_search_module(libzstd QUIET IMPORTED_TARGET GLOBAL libzstd)
+        if (libzstd_FOUND)
+            add_library(zstd::zstd ALIAS PkgConfig::libzstd)
         endif()
     endif()
     find_package_handle_standard_args(zstd
-        REQUIRED_VARS ZSTD_LINK_LIBRARIES
-        VERSION_VAR zstd_VERSION
+        REQUIRED_VARS libzstd_LINK_LIBRARIES
+        VERSION_VAR libzstd_VERSION
     )
 endif()
diff --git a/src/core/CMakeLists.txt b/src/core/CMakeLists.txt
index d415846a9960..68f88c5650e9 100644
--- a/src/core/CMakeLists.txt
+++ b/src/core/CMakeLists.txt
@@ -788,7 +788,7 @@ endif()
 create_target_directory_groups(core)
 
 target_link_libraries(core PUBLIC common PRIVATE audio_core network video_core)
-target_link_libraries(core PUBLIC Boost::boost PRIVATE fmt::fmt nlohmann_json::nlohmann_json MbedTLS::mbedcrypto Opus::opus)
+target_link_libraries(core PUBLIC Boost::boost PRIVATE fmt::fmt nlohmann_json::nlohmann_json mbedtls Opus::opus)
 if (MINGW)
     target_link_libraries(core PRIVATE ${MSWSOCK_LIBRARY})
 endif()
diff --git a/src/dedicated_room/CMakeLists.txt b/src/dedicated_room/CMakeLists.txt
index 24a1a2f0d628..2d9731f193b3 100644
--- a/src/dedicated_room/CMakeLists.txt
+++ b/src/dedicated_room/CMakeLists.txt
@@ -16,7 +16,7 @@ if (ENABLE_WEB_SERVICE)
     target_link_libraries(yuzu-room PRIVATE web_service)
 endif()
 
-target_link_libraries(yuzu-room PRIVATE MbedTLS::mbedcrypto)
+target_link_libraries(yuzu-room PRIVATE mbedtls mbedcrypto)
 if (MSVC)
     target_link_libraries(yuzu-room PRIVATE getopt)
 endif()
