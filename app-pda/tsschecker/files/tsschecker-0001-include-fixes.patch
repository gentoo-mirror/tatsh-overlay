From 84554db95210f798512b2de91bba7cab3bf4d331 Mon Sep 17 00:00:00 2001
From: Andrew Udvare <audvare@gmail.com>
Date: Sun, 5 Mar 2023 03:07:02 -0500
Subject: [PATCH] Include fixes

---
 include/tsschecker/TssRequest.hpp | 19 ++++++------
 tsschecker/TssRequest.cpp         | 43 ++++++++++++++-------------
 tsschecker/main.cpp               | 49 ++++++++++++++++---------------
 tsschecker/tsschecker.cpp         | 47 ++++++++++++++---------------
 4 files changed, 81 insertions(+), 77 deletions(-)

diff --git a/include/tsschecker/TssRequest.hpp b/include/tsschecker/TssRequest.hpp
index a5c575a..f70be8e 100644
--- a/include/tsschecker/TssRequest.hpp
+++ b/include/tsschecker/TssRequest.hpp
@@ -11,6 +11,7 @@
 #include <stdint.h>
 #include <plist/plist.h>
 #include <iostream>
+#include <vector>
 
 #define RESTORE_VARIANT_ERASE_INSTALL      "Erase Install (IPSW)"
 #define RESTORE_VARIANT_UPGRADE_INSTALL    "Upgrade Install (IPSW)"
@@ -24,17 +25,17 @@ class TssRequest{
 
     std::string _variant;
     uint64_t _generator;
-    
+
     void setStandardValues();
 public:
     TssRequest(const plist_t pBuildManifest, std::string variant = "");
     ~TssRequest();
-    
+
     plist_t getTSSResponce();
-    
+
 #pragma mark verifiers
     bool isProductTypeValidForRequest(const char *productType);
-    
+
 #pragma mark value modifiers
     void setDeviceVals(uint32_t cpid, uint32_t bdid, bool force = false);
     void setEcid(uint64_t ecid);
@@ -42,7 +43,7 @@ public:
     void setAPNonce(std::vector<uint8_t> nonce);
     void setSEPNonce(std::vector<uint8_t> nonce);
     void setRandomSEPNonce();
-    
+
     //baseband
     void setBbGoldCertId(uint64_t bbgoldcertid);
     void setBbGoldCertIdForDevice(const char *productType);
@@ -54,7 +55,7 @@ public:
     bool addComponent(const char *componentName, bool optional = false);
     bool deleteComponent(const char *componentName);
     void unsetAPNonce();
-    
+
 #pragma mark value getters
     uint32_t getCPID() const;
     uint32_t getBDID() const;
@@ -68,7 +69,7 @@ public:
     std::string getBuildVersion() const;
 
     plist_t getSelectedBuildIdentity();
-    
+
 #pragma mark configuration specifiers
     void addDefaultAPTagsToRequest();
     void addAllAPComponentsToRequest();
@@ -80,7 +81,7 @@ public:
 
 #pragma mark debugging
     void dumpRequest();
-    
+
 #pragma mark static
     static plist_t getBuildIdentityForDevice(plist_t pBuildManifest, uint32_t cpid, uint32_t bdid, std::string variant = "");
     static std::string getVariantNameFromBuildIdentity(plist_t pBuildIdentity);
@@ -88,7 +89,7 @@ public:
     static void applyRestoreRulesForManifestComponent(plist_t component, plist_t restoreRules, plist_t tss_request);
     static void copyKeyFromPlist(plist_t request, plist_t manifest, const char *key, bool optional = false);
     static uint64_t getNumberFromStringElementInDict(plist_t dict, const char *key, int base = 16);
-    
+
     static char *TssSendPlistRequest(const plist_t tssreq, const char *server_url_string = NULL);
     static char *TssSendRawBuffer(const char *buf, size_t bufSize, const char *server_url_string = NULL);
 };
diff --git a/tsschecker/TssRequest.cpp b/tsschecker/TssRequest.cpp
index a6994bd..c2e1b47 100644
--- a/tsschecker/TssRequest.cpp
+++ b/tsschecker/TssRequest.cpp
@@ -10,6 +10,7 @@
 #include <tsschecker/TSSException.hpp>
 #include <libgeneral/macros.h>
 #include <curl/curl.h>
+#include <string.h>
 
 #ifdef HAVE_OPENSSL
 #   include <openssl/sha.h>
@@ -37,7 +38,7 @@ static char *generate_guid(){
     const char *chars = "ABCDEF0123456789";
     srand((unsigned int)time(NULL));
     int i = 0;
-    
+
     for (i = 0; i < 36; i++) {
         if (i == 8 || i == 13 || i == 18 || i == 23) {
             guid[i] = '-';
@@ -88,7 +89,7 @@ void TssRequest::setStandardValues(){
         cleanup([&]{
             safeFree(guid);
         });
-        
+
         if ((guid = generate_guid())) {
             plist_dict_set_item(_pReq, "@UUID", plist_new_string(guid));
         }
@@ -127,15 +128,15 @@ bool TssRequest::isProductTypeValidForRequest(const char *productType){
     plist_t pProductType = NULL;
 
     retcustomassure(TSSException_unsupportedProductType, pSupportedProductType = plist_dict_get_item(_pBuildManifest, "SupportedProductTypes"), "Failed to get SupportedProductTypes");
-    
+
     plist_array_new_iter(pSupportedProductType, &p_iter_SupportedProductType);
-    
+
     for (plist_array_next_item(pSupportedProductType, p_iter_SupportedProductType, &pProductType); pProductType; plist_array_next_item(pSupportedProductType, p_iter_SupportedProductType, &pProductType)) {
         if (plist_string_val_compare(pProductType, productType) == 0) return true;
     }
     return false;
 }
-    
+
 #pragma mark value modifiers
 void TssRequest::setDeviceVals(uint32_t cpid, uint32_t bdid, bool force){
     const char *productType = NULL;
@@ -174,14 +175,14 @@ void TssRequest::setNonceGenerator(uint64_t generator){
                 SHA1((const unsigned char*)&generator,sizeof(generator),apnonce);
                 plist_dict_set_item(_pReq, "ApNonce", plist_new_data((char*)apnonce, apnonceLen));
                 break;
-                
+
             case kNonceTypeSHA384:
                 apnonceLen = 32;
                 retassure(apnonce = (uint8_t*)malloc(SHA384_DIGEST_LENGTH), "failed to malloc(%d)",SHA384_DIGEST_LENGTH);
                 SHA384((const unsigned char*)&generator,sizeof(generator),apnonce);
                 plist_dict_set_item(_pReq, "ApNonce", plist_new_data((char*)apnonce, apnonceLen));
                 break;
-                
+
             default:
                 reterror("Unexpected nonce type=%d",nonceType);
                 break;
@@ -405,7 +406,7 @@ void TssRequest::addDefaultAPTagsToRequest(){
     if (!hasPartialDigest) {
         //this is IMG4
         plist_dict_set_item(_pReq, "@ApImg4Ticket", plist_new_bool(1));
-        
+
         //IMG4 always needs SEP nonce!
         if (!plist_dict_get_item(_pReq, "SepNonce")) setRandomSEPNonce();
     }else{
@@ -418,11 +419,11 @@ void TssRequest::addDefaultAPTagsToRequest(){
 void TssRequest::addAllAPComponentsToRequest(){
     plist_t pIdentity = getSelectedBuildIdentity();
     info("Adding all AP components to request for variant '%s'",getVariantNameFromBuildIdentity(pIdentity).c_str());
-    
+
     copyKeyFromPlist(_pReq, pIdentity, "UniqueBuildID");
     plist_t pManifest = NULL;
     retassure(pManifest = plist_dict_get_item(pIdentity, "Manifest"), "Failed to get Manifest");
-    
+
     iterateOverPlistElementsInDict(pManifest, [&](const char *key, plist_t e)->void*{
         //add element to request
         plist_t pKey = NULL;
@@ -470,10 +471,10 @@ void TssRequest::addYonkersComponentsToRequest(){
     reterror("TODO implement!");
 //    plist_t pIdentity = getSelectedBuildIdentity();
 //    info("Adding Yonkery components to request for variant '%s'",getVariantNameFromBuildIdentity(pIdentity).c_str());
-//    
+//
 //    plist_t pManifest = NULL;
 //    retassure(pManifest = plist_dict_get_item(pIdentity, "Manifest"), "Failed to get Manifest");
-//    
+//
 //    iterateOverPlistElementsInDict(pManifest, [&](const char *key, plist_t e)->void*{
 //        if (strncmp(key, "Yonkers", sizeof("Yonkers")-1) != 0) return NULL;
 //        //add element to request
@@ -535,7 +536,7 @@ void TssRequest::removeNonBasebandComponentsFromRequest(){
         //actual baseband keys
         whitelistKey("BasebandFirmware");
         if (strncmp(key, "Bb", 2) == 0) return NULL;
-        
+
         delkeys.push_back(key);
 #undef whitelistKey
         return NULL;
@@ -555,7 +556,7 @@ void TssRequest::dumpRequest(){
 plist_t TssRequest::getBuildIdentityForDevice(plist_t pBuildManifest, uint32_t cpid, uint32_t bdid, std::string variant){
     plist_t pBuildIdentities = NULL;
     retassure(pBuildIdentities = plist_dict_get_item(pBuildManifest, "BuildIdentities"), "Failed to get BuildIdentities");
-    
+
     return iterateOverPlistElementsInArray(pBuildIdentities, [&](plist_t e)->plist_t{
         uint64_t cCPID = 0;
         uint64_t cBDID = 0;
@@ -577,7 +578,7 @@ plist_t TssRequest::getBuildIdentityForDevice(plist_t pBuildManifest, uint32_t c
             cBDID = strtoll(sBDID, NULL, 16);
          }
         if (cCPID != cpid || cBDID != bdid) return 0;
-        
+
         auto v = getVariantNameFromBuildIdentity(e);
         if (strstr(v.c_str(), variant.c_str())){
             return e;
@@ -640,7 +641,7 @@ void TssRequest::applyRestoreRulesForManifestComponent(plist_t component, plist_
                 return (void*)!ret;
             });
             if (conditionsFailed) return NULL;
-            
+
             iterateOverPlistElementsInDict(plist_dict_get_item(e, "Actions"), [&](const char *key, plist_t action)->void*{
                 plist_dict_set_item(component, key, plist_copy(action));
                 return NULL;
@@ -670,7 +671,7 @@ char *TssRequest::TssSendRawBuffer(const char *buf, size_t bufSize, const char *
         "http://17.111.103.65/TSS/controller?action=2",
         "http://17.111.103.15/TSS/controller?action=2",
     };
-    
+
     for (int i = 0; i < TSS_MAX_TRIES; i++) {
         CURL *mcurl = NULL;
         struct curl_slist* header = NULL;
@@ -682,19 +683,19 @@ char *TssRequest::TssSendRawBuffer(const char *buf, size_t bufSize, const char *
         char curl_error_message[CURL_ERROR_SIZE] = {};
         const char *url = NULL;
         CURLcode cret = {};
-        
+
         if (server_url_string) {
             url = server_url_string;
         }else{
             url = urls[i % TSS_URLS_NUM];
         }
-        
+
         info("Attempt %d request URL set to %s", i, url);
         retassure(mcurl = curl_easy_init(), "Failed to init curl");
         header = curl_slist_append(header, "Cache-Control: no-cache");
         header = curl_slist_append(header, "Content-type: text/xml; charset=\"utf-8\"");
         header = curl_slist_append(header, "Expect:");
-        
+
         /* disable SSL verification to allow download from untrusted https locations */
         curl_easy_setopt(mcurl, CURLOPT_URL, url);
         curl_easy_setopt(mcurl, CURLOPT_SSL_VERIFYPEER, 0);
@@ -721,7 +722,7 @@ char *TssRequest::TssSendRawBuffer(const char *buf, size_t bufSize, const char *
         const char *message = NULL;
         size_t messageLen = 0;
         int status_code = 0;
-        
+
         if (!(status = strstr(rspstr, "STATUS="))){
             error("Failed to find status in response");
             continue;
diff --git a/tsschecker/main.cpp b/tsschecker/main.cpp
index dee914e..5026ef1 100644
--- a/tsschecker/main.cpp
+++ b/tsschecker/main.cpp
@@ -7,6 +7,7 @@
 
 #include <libgeneral/macros.h>
 #include <getopt.h>
+#include <string.h>
 
 #include <tsschecker/FirmwareAPI_IPSWME.hpp>
 #include <tsschecker/tsschecker.hpp>
@@ -25,7 +26,7 @@ enum RequestSelector {
     kRequestSelectorDefault = 0,
     kRequestSelectorDefaultBasebandNo = 1,
     kRequestSelectorDefaultBasebandOnly = 2,
-    
+
     kRequestSelectorLastArg = 2
 };
 
@@ -117,10 +118,10 @@ int main_r(int argc, const char * argv[]) {
 
     int opt = 0;
     int optindex = 0;
-    
+
     bool isOta = false;
     CacheSelector useCache = kNoCache;
-    
+
     bool doListDevices = false;
     bool doListVersions = false;
     bool doListBuilds = false;
@@ -144,7 +145,7 @@ int main_r(int argc, const char * argv[]) {
     std::string restoreVariant;
 
     std::vector<std::string> whitelistComponents;
-    
+
     uint64_t ecid = 0;
     uint64_t generator = 0;
 
@@ -185,11 +186,11 @@ int main_r(int argc, const char * argv[]) {
                     requestSelection = kRequestSelectorDefaultBasebandNo;
                 }
                 break;
-                
+
             case 'B': //long option "boardconfig"
                 boardType = optarg;
                 break;
-                
+
             case 'c': //long option "cache"
             {
                 int l_cache = optarg ? atoi(optarg)-1 : (int)useCache;
@@ -197,7 +198,7 @@ int main_r(int argc, const char * argv[]) {
                 useCache = (CacheSelector)l_cache;
             }
                 break;
-                
+
             case 'd': //long option "device"
                 productType = optarg;
                 break;
@@ -243,11 +244,11 @@ int main_r(int argc, const char * argv[]) {
             case 'u': //long option "upgrade-install"
                 restoreVariant = "Customer Upgrade Install";
                 break;
-                
+
             case 'V': //long option "sepnonce"
                 restoreVariant = optarg;
                 break;
-                
+
             case 'Z': //long option "buildid"
                 buildNumber = optarg;
                 break;
@@ -255,19 +256,19 @@ int main_r(int argc, const char * argv[]) {
             case 'h': //long option "help"
                 cmd_help();
                 return 0;
-                
+
             default:
                 cmd_help();
                 return -1;
         }
     }
-    
+
     if (argc < 2) {
         //no arguments specified
         cmd_help();
         return 0;
     }
-    
+
     if (rawRequestPath) {
         char *rsp = NULL;
         cleanup([&]{
@@ -309,13 +310,13 @@ int main_r(int argc, const char * argv[]) {
             if (!isLoaded) fapi->load();
         }
     }
-    
+
     if (fapi && doListDevices) {
         auto devs = fapi->listDevices();
         printListOfDevices(devs);
         return 0;
     }
-    
+
     if (boardType && !productType){
         productType = getProductTypeFromBoardType(boardType);
     }else if (productType && !boardType){
@@ -359,7 +360,7 @@ int main_r(int argc, const char * argv[]) {
         });
 
         FirmwareAPI::firmwareVersion fvers;
-        
+
         if (buildManifestPath){
             retassure(p_BuildManifest = readPlist(buildManifestPath), "Failed to load plist from '%s'",buildManifestPath);
             fvers = firmwareVersionFromBuildManifest(p_BuildManifest);
@@ -377,11 +378,11 @@ int main_r(int argc, const char * argv[]) {
             info("Got Firmware %s %s %s",fvers.version.c_str(),fvers.build.c_str(),fvers.url.c_str());
             p_BuildManifest = getBuildManifestFromUrl(fvers.url.c_str());
         }
-        
+
         retassure(p_BuildManifest, "Failed to load BuildManifest.plist");
-        
+
         TssRequest req(p_BuildManifest,restoreVariant);
-        
+
         req.setDeviceVals(getCPIDForBoardType(boardType), getBDIDForBoardType(boardType));
         req.setEcid(ecid);
         if (requestSelection != kRequestSelectorDefaultBasebandOnly) {
@@ -411,7 +412,7 @@ int main_r(int argc, const char * argv[]) {
         }else{
             info("Requesting baseband-only ticket");
         }
-        
+
         if (requestSelection == kRequestSelectorDefaultBasebandNo){
             info("Not requesting baseband ticket");
         } else{
@@ -431,9 +432,9 @@ int main_r(int argc, const char * argv[]) {
                 warning("Skipping requesting baseband ticket, because required basenand values could not be extracted from manifest (Missing key: '%s')",e.keyname().c_str());
             }
         }
-        
+
         if (doPrintTssRequest) req.dumpRequest();
-        
+
         try {
             rsp = req.getTSSResponce();
         } catch (tihmstar::TSSException_NoTicket &e) {
@@ -443,19 +444,19 @@ int main_r(int argc, const char * argv[]) {
             if (doPrintTssResponse) dumpplist(rsp);
             info("%s %s for %s %s IS signed!",fvers.version.c_str(),fvers.build.c_str(),productType,boardType);
             retval = 0;
-            
+
             if (savePath) {
                 auto ticketpath = getTicketSavePathFromRequest(savePath, req);
                 writePlist(ticketpath.c_str(), rsp);
                 info("APTicket saved to '%s'",ticketpath.c_str());
             }
-            
+
         }else{
             info("%s %s for %s %s is NOT signed!",fvers.version.c_str(),fvers.build.c_str(),productType,boardType);
             retval = 1;
         }
     }
-    
+
     info("done");
     return retval;
 }
diff --git a/tsschecker/tsschecker.cpp b/tsschecker/tsschecker.cpp
index 3d0c9b2..7f7f84f 100644
--- a/tsschecker/tsschecker.cpp
+++ b/tsschecker/tsschecker.cpp
@@ -15,6 +15,7 @@
 #include <fcntl.h>
 #include <unistd.h>
 #include <sys/stat.h>
+#include <string.h>
 
 using namespace tihmstar;
 
@@ -33,7 +34,7 @@ static struct bbdevice bbdevices[] = {
     {"iPod5,1", 0, 0}, // 5th gen
     {"iPod7,1", 0, 0}, // 6th gen
     {"iPod9,1", 0, 0}, // 7th gen
-    
+
     // iPhones
     {"iPhone3,1", 257, 12}, // iPhone 4 GSM
     {"iPhone3,2", 257, 12}, // iPhone 4 GSM (2012, Rev A)
@@ -68,7 +69,7 @@ static struct bbdevice bbdevices[] = {
     {"iPhone12,3", 524245983, 12}, // iPhone 11 Pro
     {"iPhone12,5", 524245983, 12}, // iPhone 11 Pro Max
     {"iPhone12,8", 524245983, 12}, // iPhone SE (2020)
-    
+
     // iPads
     {"iPad1,1", 0, 0}, // iPad (1st gen)
     {"iPad2,1", 0, 0}, // iPad 2 Wi-Fi
@@ -87,7 +88,7 @@ static struct bbdevice bbdevices[] = {
     {"iPad7,6", 3840149528, 4}, // iPad (6th gen, 2018, Cellular)
     {"iPad7,11", 0, 0}, // iPad (7th gen, 2019, Wi-Fi)
     {"iPad7,12", 524245983, 12}, // iPad (7th gen, 2019, Cellular)
-    
+
     // iPad minis
     {"iPad2,5", 0, 0}, // iPad mini (1st gen, Wi-Fi)
     {"iPad2,6", 3255536192, 4}, // iPad mini (1st gen, CDMA)
@@ -102,7 +103,7 @@ static struct bbdevice bbdevices[] = {
     {"iPad5,2", 3840149528, 4}, // iPad mini 4 (Cellular)
     {"iPad11,1", 0, 0}, // iPad mini (5th gen, Wi-Fi)
     {"iPad11,2", 165673526, 12}, // iPad mini (5th gen, Cellular)
-    
+
     // iPad Airs
     {"iPad4,1", 0, 0}, // iPad Air (Wi-Fi)
     {"iPad4,2", 3554301762, 4}, // iPad Air (Cellular)
@@ -111,7 +112,7 @@ static struct bbdevice bbdevices[] = {
     {"iPad5,4", 3840149528, 4}, // iPad Air 2 (Cellular)
     {"iPad11,3", 0, 0}, // iPad Air (3rd gen, Wi-Fi)
     {"iPad11,4", 165673526, 12}, // iPad Air (3rd gen, Cellular)
-    
+
     // iPad Pros
     {"iPad6,3", 0, 0}, // iPad Pro (9,7", Wi-Fi)
     {"iPad6,4", 3840149528, 4}, // iPad Pro (9,7", Cellular)
@@ -133,7 +134,7 @@ static struct bbdevice bbdevices[] = {
     {"iPad8,10", 524245983, 12}, // iPad Pro 11", 2nd gen, Cellular)
     {"iPad8,11", 0, 0}, // iPad Pro (12,9", 4th gen, Wi-Fi)
     {"iPad8,12", 524245983, 12}, // iPad Pro 12,9", 4th gen, Cellular)
-    
+
     // Apple Watches
     {"Watch1,1", 0, 0}, // Apple Watch 1st gen (38mm)
     {"Watch1,2", 0, 0}, // Apple Watch 1st gen (42mm)
@@ -153,7 +154,7 @@ static struct bbdevice bbdevices[] = {
     {"Watch5,2", 0, 0}, // Apple Watch Series 5 (44mm GPS)
     {"Watch5,3", 744114402, 12}, // Apple Watch Series 5 (40mm GPS + Cellular)
     {"Watch5,4", 744114402, 12}, // Apple Watch Series 5 (44mm GPS + Cellular)
-    
+
     // Apple TVs
     {"AppleTV1,1", 0, 0}, // 1st gen
     {"AppleTV2,1", 0, 0}, // 2nd gen
@@ -181,7 +182,7 @@ static void fragmentzip_callback(unsigned int progress){
 uint64_t tsschecker::parseECID(const char *ecid){
     bool isHex = false;
     int64_t ret = 0;
-    
+
     if (strncasecmp(ecid, "0x", 2) == 0) {
         isHex = true;
         ecid += 2;
@@ -205,7 +206,7 @@ uint64_t tsschecker::parseECID(const char *ecid){
         return ret;
     parse_hex:;
     }
-    
+
     //parse hex
     while (*ecid) {
         char c = *ecid++;
@@ -259,7 +260,7 @@ tsschecker::firmwareVersion tsschecker::firmwareVersionFromBuildManifest(plist_t
             ret.version = {s,s+slen};
         }
     }
-    
+
     {
         plist_t pVal = NULL;
         retassure(pVal = plist_dict_get_item(pBuildManifest, "ProductBuildVersion"), "ProductBuildVersion not set");
@@ -271,7 +272,7 @@ tsschecker::firmwareVersion tsschecker::firmwareVersionFromBuildManifest(plist_t
             ret.build = {s,s+slen};
         }
     }
-    
+
     return ret;
 }
 
@@ -285,10 +286,10 @@ std::vector<uint8_t> tsschecker::downloadFile(const char *url){
     });
     std::vector<uint8_t> ret;
     CURLcode res = {};
-    
+
     mcurl = curl_easy_init();
-    
-    
+
+
     curl_easy_setopt(mcurl, CURLOPT_URL, url);
     curl_easy_setopt(mcurl, CURLOPT_TIMEOUT, 20L); //20 sec
     curl_easy_setopt(mcurl, CURLOPT_WRITEFUNCTION, (size_t (*)(void *, size_t, size_t, void *))[](void *contents, size_t size, size_t nmemb, void *userp)->size_t{
@@ -299,7 +300,7 @@ std::vector<uint8_t> tsschecker::downloadFile(const char *url){
         return realsize;
     });
     curl_easy_setopt(mcurl, CURLOPT_WRITEDATA, (void *)&ret);
-    
+
     retassure((res = curl_easy_perform(mcurl)) == CURLE_OK, "curl failed with error=%d",res);
     return ret;
 }
@@ -313,9 +314,9 @@ plist_t tsschecker::getBuildManifestFromUrl(const char *ipswurl){
     });
     size_t bufSize = 0;
     int err = 0;
-    
+
     retassure(fz = fragmentzip_open(ipswurl), "Failed to open url: '%s'",ipswurl);
-    
+
     if ((err = fragmentzip_download_to_memory(fz, "BuildManifest.plist", &buf, &bufSize, fragmentzip_callback))){
         debug("Failed to get BuildManifest.plist, retrying with AssetData/boot/BuildManifest.plist");
         err = fragmentzip_download_to_memory(fz, "AssetData/boot/BuildManifest.plist", &buf, &bufSize, fragmentzip_callback);
@@ -406,7 +407,7 @@ std::string tsschecker::getTicketSavePathFromRequest(const char *path, const Tss
     //dst path is a directory, generate a filename
     std::string ret = path;
     if (ret.back() != '/') ret += '\n';
-    
+
     ret += req.getProductType() + "_";
     {
         char buf[100] = {};
@@ -422,7 +423,7 @@ std::string tsschecker::getTicketSavePathFromRequest(const char *path, const Tss
         //
     }
     ret += ".shsh";
-    
+
     try {
         if (req.getGenerator()) ret += "2";
     } catch (...) {
@@ -486,7 +487,7 @@ const char *tsschecker::getBoardTypeFromProductType(const char *productType){
                         Thus, we can't uniquely identify one of these CPIDs solely by looking at the device type :(
                      */
                     return 0;
-                    
+
                 default:
                     return dev->hardware_model;
             }
@@ -542,7 +543,7 @@ uint32_t tsschecker::getCPIDForProductType(const char *productType){
                         Thus, we can't uniquely identify one of these CPIDs solely by looking at the device type :(
                      */
                     return 0;
-                    
+
                 default:
                     return dev->chip_id;
             }
@@ -622,7 +623,7 @@ void *tsschecker::iterateOverPlistElementsInArray(plist_t array, std::function<v
     });
     plist_t pElem = NULL;
     plist_array_new_iter(array, &p_iter);
-    
+
     for (plist_array_next_item(array, p_iter, &pElem); pElem; plist_array_next_item(array, p_iter, &pElem)) {
         if (void *r = cb(pElem)) return r;
     }
@@ -638,7 +639,7 @@ void *tsschecker::iterateOverPlistElementsInDict(plist_t dict, std::function<voi
     });
     plist_t pElem = NULL;
     plist_dict_new_iter(dict, &p_iter);
-        
+
     for (plist_dict_next_item(dict, p_iter, &key, &pElem); pElem; safeFree(key),plist_dict_next_item(dict, p_iter, &key, &pElem)) {
         if (void *r = cb(key, pElem)) return r;
     }
-- 
2.39.2

